// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"

	"github.com/jackc/pgx"
)

// BadgeField TBD
type BadgeField int

const (
	// BadgeFieldID TBD
	BadgeFieldID BadgeField = iota

	// BadgeFieldName TBD
	BadgeFieldName

	// BadgeFieldNormalName TBD
	BadgeFieldNormalName

	// BadgeFieldColor TBD
	BadgeFieldColor

	// BadgeFieldRootID TBD
	BadgeFieldRootID
)

// BadgeFieldsList TBD
type BadgeFieldsList []BadgeField

// BadgeAllFields TBD
var BadgeAllFields = BadgeFieldsList{
	BadgeFieldID,
	BadgeFieldName,
	BadgeFieldNormalName,
	BadgeFieldColor,
	BadgeFieldRootID,
}

// BadgeFieldsNames TBD
var BadgeFieldsNames = [...]string{
	"id",
	"name",
	"normal_name",
	"color",
	"root_id",
}

// Name TBD
func (f BadgeField) Name() string {
	if int(f) > len(BadgeFieldsNames)-1 {
		return "unknown"
	}
	return BadgeFieldsNames[f]
}

// JoinedNames TBD
func (l BadgeFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l BadgeFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l BadgeFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l BadgeFieldsList) Del(fields ...BadgeField) BadgeFieldsList {
	var res = make(BadgeFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l BadgeFieldsList) PushBack(fields ...BadgeField) BadgeFieldsList {
	var res = make(BadgeFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l BadgeFieldsList) PushFront(fields ...BadgeField) BadgeFieldsList {
	var res = make(BadgeFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *Badge) FieldsValues(fields BadgeFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *Badge) FieldValue(f BadgeField) interface{} {
	switch f {
	case BadgeFieldID:
		return x.ID
	case BadgeFieldName:
		return x.Name
	case BadgeFieldNormalName:
		return x.NormalName
	case BadgeFieldColor:
		return x.Color
	case BadgeFieldRootID:
		return &x.RootID
	}
	return nil
}

// SetFieldValue TBD
func (x *Badge) SetFieldValue(f BadgeField, v interface{}) error {
	switch f {
	case BadgeFieldID:
		x.ID = v.(int64)
	case BadgeFieldName:
		x.Name = v.(string)
	case BadgeFieldNormalName:
		x.NormalName = v.(string)
	case BadgeFieldColor:
		x.Color = v.(string)
	case BadgeFieldRootID:
		if v == nil {
			x.RootID = nil
		} else {
			value := v.(int64)
			x.RootID = &value
		}
	}
	return nil
}

// BadgeQuerier TBD
type BadgeQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// BadgeRows TBD
type BadgeRows struct {
	rows   *pgx.Rows
	fields BadgeFieldsList
}

// Close TBD
func (r *BadgeRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *BadgeRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *BadgeRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *BadgeRows) ScanTo(x *Badge) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *BadgeRows) Scan() (x *Badge, err error) {
	x = new(Badge)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *BadgeRows) ScanAll(sizeHint int) ([]*Badge, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*Badge, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// BadgeRow TBD
type BadgeRow BadgeRows

// ScanTo TBD
func (r *BadgeRow) ScanTo(x *Badge) error {
	rows := (*BadgeRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *BadgeRow) Scan() (x *Badge, err error) {
	x = new(Badge)
	err = r.ScanTo(x)
	return
}

// QueryBadge TBD
func QueryBadge(q BadgeQuerier, fields BadgeFieldsList, sql string, args ...interface{}) (*BadgeRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &BadgeRows{rows: pgxRows, fields: fields}, nil
}

// QueryBadgeRow TBD
func QueryBadgeRow(q BadgeQuerier, fields BadgeFieldsList, sql string, args ...interface{}) *BadgeRow {
	pgxRows, _ := q.Query(sql, args...)
	return &BadgeRow{rows: pgxRows, fields: fields}
}

// ScanBadgeList TBD
func ScanBadgeList(q BadgeQuerier, fields BadgeFieldsList, sql string, args ...interface{}) ([]*Badge, error) {
	rows, err := QueryBadge(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanBadge TBD
func ScanBadge(q BadgeQuerier, fields BadgeFieldsList, sql string, args ...interface{}) (*Badge, error) {
	x, err := QueryBadgeRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
