// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"time"

	"github.com/jackc/pgx"
)

// ConversationUserField TBD
type ConversationUserField int

const (
	// ConversationUserFieldID TBD
	ConversationUserFieldID ConversationUserField = iota

	// ConversationUserFieldUserID TBD
	ConversationUserFieldUserID

	// ConversationUserFieldPeerID TBD
	ConversationUserFieldPeerID

	// ConversationUserFieldPeerType TBD
	ConversationUserFieldPeerType

	// ConversationUserFieldJoinedAt TBD
	ConversationUserFieldJoinedAt

	// ConversationUserFieldLastReadMessageID TBD
	ConversationUserFieldLastReadMessageID

	// ConversationUserFieldNUnreadMessages TBD
	ConversationUserFieldNUnreadMessages

	// ConversationUserFieldInvitedUserID TBD
	ConversationUserFieldInvitedUserID

	// ConversationUserFieldCreationTime TBD
	ConversationUserFieldCreationTime
)

// ConversationUserFieldsList TBD
type ConversationUserFieldsList []ConversationUserField

// ConversationUserAllFields TBD
var ConversationUserAllFields = ConversationUserFieldsList{
	ConversationUserFieldID,
	ConversationUserFieldUserID,
	ConversationUserFieldPeerID,
	ConversationUserFieldPeerType,
	ConversationUserFieldJoinedAt,
	ConversationUserFieldLastReadMessageID,
	ConversationUserFieldNUnreadMessages,
	ConversationUserFieldInvitedUserID,
	ConversationUserFieldCreationTime,
}

// ConversationUserFieldsNames TBD
var ConversationUserFieldsNames = [...]string{
	"id",
	"user_id",
	"peer_id",
	"peer_type",
	"joined_at",
	"last_read_message_id",
	"n_unread_messages",
	"inviter_user_id",
	"creation_time",
}

// Name TBD
func (f ConversationUserField) Name() string {
	if int(f) > len(ConversationUserFieldsNames)-1 {
		return "unknown"
	}
	return ConversationUserFieldsNames[f]
}

// JoinedNames TBD
func (l ConversationUserFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l ConversationUserFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l ConversationUserFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l ConversationUserFieldsList) Del(fields ...ConversationUserField) ConversationUserFieldsList {
	var res = make(ConversationUserFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l ConversationUserFieldsList) PushBack(fields ...ConversationUserField) ConversationUserFieldsList {
	var res = make(ConversationUserFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l ConversationUserFieldsList) PushFront(fields ...ConversationUserField) ConversationUserFieldsList {
	var res = make(ConversationUserFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *ConversationUser) FieldsValues(fields ConversationUserFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *ConversationUser) FieldValue(f ConversationUserField) interface{} {
	switch f {
	case ConversationUserFieldID:
		return x.ID
	case ConversationUserFieldUserID:
		return x.UserID
	case ConversationUserFieldPeerID:
		return x.PeerID
	case ConversationUserFieldPeerType:
		return int16(x.PeerType)
	case ConversationUserFieldJoinedAt:
		return x.JoinedAt
	case ConversationUserFieldLastReadMessageID:
		return &x.LastReadMessageID
	case ConversationUserFieldNUnreadMessages:
		return x.NUnreadMessages
	case ConversationUserFieldInvitedUserID:
		return &x.InvitedUserID
	case ConversationUserFieldCreationTime:
		return x.CreationTime
	}
	return nil
}

// SetFieldValue TBD
func (x *ConversationUser) SetFieldValue(f ConversationUserField, v interface{}) error {
	switch f {
	case ConversationUserFieldID:
		x.ID = v.(int64)
	case ConversationUserFieldUserID:
		x.UserID = v.(int64)
	case ConversationUserFieldPeerID:
		x.PeerID = v.(int64)
	case ConversationUserFieldPeerType:
		x.PeerType = PeerType(v.(int16))
	case ConversationUserFieldJoinedAt:
		x.JoinedAt = v.(time.Time)
	case ConversationUserFieldLastReadMessageID:
		if v == nil {
			x.LastReadMessageID = nil
		} else {
			value := v.(int64)
			x.LastReadMessageID = &value
		}
	case ConversationUserFieldNUnreadMessages:
		x.NUnreadMessages = v.(int32)
	case ConversationUserFieldInvitedUserID:
		if v == nil {
			x.InvitedUserID = nil
		} else {
			value := v.(int64)
			x.InvitedUserID = &value
		}
	case ConversationUserFieldCreationTime:
		x.CreationTime = v.(time.Time)
	}
	return nil
}

// ConversationUserQuerier TBD
type ConversationUserQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// ConversationUserRows TBD
type ConversationUserRows struct {
	rows   *pgx.Rows
	fields ConversationUserFieldsList
}

// Close TBD
func (r *ConversationUserRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *ConversationUserRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *ConversationUserRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *ConversationUserRows) ScanTo(x *ConversationUser) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *ConversationUserRows) Scan() (x *ConversationUser, err error) {
	x = new(ConversationUser)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *ConversationUserRows) ScanAll(sizeHint int) ([]*ConversationUser, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*ConversationUser, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// ConversationUserRow TBD
type ConversationUserRow ConversationUserRows

// ScanTo TBD
func (r *ConversationUserRow) ScanTo(x *ConversationUser) error {
	rows := (*ConversationUserRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *ConversationUserRow) Scan() (x *ConversationUser, err error) {
	x = new(ConversationUser)
	err = r.ScanTo(x)
	return
}

// QueryConversationUser TBD
func QueryConversationUser(q ConversationUserQuerier, fields ConversationUserFieldsList, sql string, args ...interface{}) (*ConversationUserRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &ConversationUserRows{rows: pgxRows, fields: fields}, nil
}

// QueryConversationUserRow TBD
func QueryConversationUserRow(q ConversationUserQuerier, fields ConversationUserFieldsList, sql string, args ...interface{}) *ConversationUserRow {
	pgxRows, _ := q.Query(sql, args...)
	return &ConversationUserRow{rows: pgxRows, fields: fields}
}

// ScanConversationUserList TBD
func ScanConversationUserList(q ConversationUserQuerier, fields ConversationUserFieldsList, sql string, args ...interface{}) ([]*ConversationUser, error) {
	rows, err := QueryConversationUser(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanConversationUser TBD
func ScanConversationUser(q ConversationUserQuerier, fields ConversationUserFieldsList, sql string, args ...interface{}) (*ConversationUser, error) {
	x, err := QueryConversationUserRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
