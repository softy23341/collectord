// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"

	"github.com/jackc/pgx"
)

// UnreadMessageField TBD
type UnreadMessageField int

const (
	// UnreadMessageFieldID TBD
	UnreadMessageFieldID UnreadMessageField = iota

	// UnreadMessageFieldMessageID TBD
	UnreadMessageFieldMessageID

	// UnreadMessageFieldUserID TBD
	UnreadMessageFieldUserID

	// UnreadMessageFieldPeerID TBD
	UnreadMessageFieldPeerID

	// UnreadMessageFieldPeerType TBD
	UnreadMessageFieldPeerType
)

// UnreadMessageFieldsList TBD
type UnreadMessageFieldsList []UnreadMessageField

// UnreadMessageAllFields TBD
var UnreadMessageAllFields = UnreadMessageFieldsList{
	UnreadMessageFieldID,
	UnreadMessageFieldMessageID,
	UnreadMessageFieldUserID,
	UnreadMessageFieldPeerID,
	UnreadMessageFieldPeerType,
}

// UnreadMessageFieldsNames TBD
var UnreadMessageFieldsNames = [...]string{
	"id",
	"message_id",
	"user_id",
	"peer_id",
	"peer_type",
}

// Name TBD
func (f UnreadMessageField) Name() string {
	if int(f) > len(UnreadMessageFieldsNames)-1 {
		return "unknown"
	}
	return UnreadMessageFieldsNames[f]
}

// JoinedNames TBD
func (l UnreadMessageFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l UnreadMessageFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l UnreadMessageFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l UnreadMessageFieldsList) Del(fields ...UnreadMessageField) UnreadMessageFieldsList {
	var res = make(UnreadMessageFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l UnreadMessageFieldsList) PushBack(fields ...UnreadMessageField) UnreadMessageFieldsList {
	var res = make(UnreadMessageFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l UnreadMessageFieldsList) PushFront(fields ...UnreadMessageField) UnreadMessageFieldsList {
	var res = make(UnreadMessageFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *UnreadMessage) FieldsValues(fields UnreadMessageFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *UnreadMessage) FieldValue(f UnreadMessageField) interface{} {
	switch f {
	case UnreadMessageFieldID:
		return x.ID
	case UnreadMessageFieldMessageID:
		return x.MessageID
	case UnreadMessageFieldUserID:
		return x.UserID
	case UnreadMessageFieldPeerID:
		return x.PeerID
	case UnreadMessageFieldPeerType:
		return int16(x.PeerType)
	}
	return nil
}

// SetFieldValue TBD
func (x *UnreadMessage) SetFieldValue(f UnreadMessageField, v interface{}) error {
	switch f {
	case UnreadMessageFieldID:
		x.ID = v.(int64)
	case UnreadMessageFieldMessageID:
		x.MessageID = v.(int64)
	case UnreadMessageFieldUserID:
		x.UserID = v.(int64)
	case UnreadMessageFieldPeerID:
		x.PeerID = v.(int64)
	case UnreadMessageFieldPeerType:
		x.PeerType = PeerType(v.(int16))
	}
	return nil
}

// UnreadMessageQuerier TBD
type UnreadMessageQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// UnreadMessageRows TBD
type UnreadMessageRows struct {
	rows   *pgx.Rows
	fields UnreadMessageFieldsList
}

// Close TBD
func (r *UnreadMessageRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *UnreadMessageRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *UnreadMessageRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *UnreadMessageRows) ScanTo(x *UnreadMessage) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *UnreadMessageRows) Scan() (x *UnreadMessage, err error) {
	x = new(UnreadMessage)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *UnreadMessageRows) ScanAll(sizeHint int) ([]*UnreadMessage, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*UnreadMessage, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// UnreadMessageRow TBD
type UnreadMessageRow UnreadMessageRows

// ScanTo TBD
func (r *UnreadMessageRow) ScanTo(x *UnreadMessage) error {
	rows := (*UnreadMessageRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *UnreadMessageRow) Scan() (x *UnreadMessage, err error) {
	x = new(UnreadMessage)
	err = r.ScanTo(x)
	return
}

// QueryUnreadMessage TBD
func QueryUnreadMessage(q UnreadMessageQuerier, fields UnreadMessageFieldsList, sql string, args ...interface{}) (*UnreadMessageRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &UnreadMessageRows{rows: pgxRows, fields: fields}, nil
}

// QueryUnreadMessageRow TBD
func QueryUnreadMessageRow(q UnreadMessageQuerier, fields UnreadMessageFieldsList, sql string, args ...interface{}) *UnreadMessageRow {
	pgxRows, _ := q.Query(sql, args...)
	return &UnreadMessageRow{rows: pgxRows, fields: fields}
}

// ScanUnreadMessageList TBD
func ScanUnreadMessageList(q UnreadMessageQuerier, fields UnreadMessageFieldsList, sql string, args ...interface{}) ([]*UnreadMessage, error) {
	rows, err := QueryUnreadMessage(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanUnreadMessage TBD
func ScanUnreadMessage(q UnreadMessageQuerier, fields UnreadMessageFieldsList, sql string, args ...interface{}) (*UnreadMessage, error) {
	x, err := QueryUnreadMessageRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
