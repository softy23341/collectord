// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"time"

	"github.com/jackc/pgx"
)

// ChatField TBD
type ChatField int

const (
	// ChatFieldID TBD
	ChatFieldID ChatField = iota

	// ChatFieldCreatorUserID TBD
	ChatFieldCreatorUserID

	// ChatFieldUserUniqID TBD
	ChatFieldUserUniqID

	// ChatFieldAdminUserID TBD
	ChatFieldAdminUserID

	// ChatFieldName TBD
	ChatFieldName

	// ChatFieldAvatarMediaID TBD
	ChatFieldAvatarMediaID

	// ChatFieldLastReadMessageID TBD
	ChatFieldLastReadMessageID

	// ChatFieldCreationTime TBD
	ChatFieldCreationTime
)

// ChatFieldsList TBD
type ChatFieldsList []ChatField

// ChatAllFields TBD
var ChatAllFields = ChatFieldsList{
	ChatFieldID,
	ChatFieldCreatorUserID,
	ChatFieldUserUniqID,
	ChatFieldAdminUserID,
	ChatFieldName,
	ChatFieldAvatarMediaID,
	ChatFieldLastReadMessageID,
	ChatFieldCreationTime,
}

// ChatFieldsNames TBD
var ChatFieldsNames = [...]string{
	"id",
	"creator_user_id",
	"user_uniq_id",
	"admin_user_id",
	"name",
	"avatar_media_id",
	"last_read_message_id",
	"creation_time",
}

// Name TBD
func (f ChatField) Name() string {
	if int(f) > len(ChatFieldsNames)-1 {
		return "unknown"
	}
	return ChatFieldsNames[f]
}

// JoinedNames TBD
func (l ChatFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l ChatFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l ChatFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l ChatFieldsList) Del(fields ...ChatField) ChatFieldsList {
	var res = make(ChatFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l ChatFieldsList) PushBack(fields ...ChatField) ChatFieldsList {
	var res = make(ChatFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l ChatFieldsList) PushFront(fields ...ChatField) ChatFieldsList {
	var res = make(ChatFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *Chat) FieldsValues(fields ChatFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *Chat) FieldValue(f ChatField) interface{} {
	switch f {
	case ChatFieldID:
		return x.ID
	case ChatFieldCreatorUserID:
		return x.CreatorUserID
	case ChatFieldUserUniqID:
		return x.UserUniqID
	case ChatFieldAdminUserID:
		return x.AdminUserID
	case ChatFieldName:
		return x.Name
	case ChatFieldAvatarMediaID:
		return &x.AvatarMediaID
	case ChatFieldLastReadMessageID:
		return x.LastReadMessageID
	case ChatFieldCreationTime:
		return &x.CreationTime
	}
	return nil
}

// SetFieldValue TBD
func (x *Chat) SetFieldValue(f ChatField, v interface{}) error {
	switch f {
	case ChatFieldID:
		x.ID = v.(int64)
	case ChatFieldCreatorUserID:
		x.CreatorUserID = v.(int64)
	case ChatFieldUserUniqID:
		x.UserUniqID = v.(int64)
	case ChatFieldAdminUserID:
		x.AdminUserID = v.(int64)
	case ChatFieldName:
		x.Name = v.(string)
	case ChatFieldAvatarMediaID:
		if v == nil {
			x.AvatarMediaID = nil
		} else {
			value := v.(int64)
			x.AvatarMediaID = &value
		}
	case ChatFieldLastReadMessageID:
		x.LastReadMessageID = v.(int64)
	case ChatFieldCreationTime:
		if v == nil {
			x.CreationTime = nil
		} else {
			value := v.(time.Time)
			x.CreationTime = &value
		}
	}
	return nil
}

// ChatQuerier TBD
type ChatQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// ChatRows TBD
type ChatRows struct {
	rows   *pgx.Rows
	fields ChatFieldsList
}

// Close TBD
func (r *ChatRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *ChatRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *ChatRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *ChatRows) ScanTo(x *Chat) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *ChatRows) Scan() (x *Chat, err error) {
	x = new(Chat)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *ChatRows) ScanAll(sizeHint int) ([]*Chat, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*Chat, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// ChatRow TBD
type ChatRow ChatRows

// ScanTo TBD
func (r *ChatRow) ScanTo(x *Chat) error {
	rows := (*ChatRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *ChatRow) Scan() (x *Chat, err error) {
	x = new(Chat)
	err = r.ScanTo(x)
	return
}

// QueryChat TBD
func QueryChat(q ChatQuerier, fields ChatFieldsList, sql string, args ...interface{}) (*ChatRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &ChatRows{rows: pgxRows, fields: fields}, nil
}

// QueryChatRow TBD
func QueryChatRow(q ChatQuerier, fields ChatFieldsList, sql string, args ...interface{}) *ChatRow {
	pgxRows, _ := q.Query(sql, args...)
	return &ChatRow{rows: pgxRows, fields: fields}
}

// ScanChatList TBD
func ScanChatList(q ChatQuerier, fields ChatFieldsList, sql string, args ...interface{}) ([]*Chat, error) {
	rows, err := QueryChat(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanChat TBD
func ScanChat(q ChatQuerier, fields ChatFieldsList, sql string, args ...interface{}) (*Chat, error) {
	x, err := QueryChatRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
