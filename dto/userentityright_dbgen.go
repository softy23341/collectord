// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"time"

	"github.com/jackc/pgx"
)

// UserEntityRightField TBD
type UserEntityRightField int

const (
	// UserEntityRightFieldID TBD
	UserEntityRightFieldID UserEntityRightField = iota

	// UserEntityRightFieldUserID TBD
	UserEntityRightFieldUserID

	// UserEntityRightFieldEntityType TBD
	UserEntityRightFieldEntityType

	// UserEntityRightFieldEntityID TBD
	UserEntityRightFieldEntityID

	// UserEntityRightFieldLevel TBD
	UserEntityRightFieldLevel

	// UserEntityRightFieldCreationTime TBD
	UserEntityRightFieldCreationTime

	// UserEntityRightFieldRootID TBD
	UserEntityRightFieldRootID
)

// UserEntityRightFieldsList TBD
type UserEntityRightFieldsList []UserEntityRightField

// UserEntityRightAllFields TBD
var UserEntityRightAllFields = UserEntityRightFieldsList{
	UserEntityRightFieldID,
	UserEntityRightFieldUserID,
	UserEntityRightFieldEntityType,
	UserEntityRightFieldEntityID,
	UserEntityRightFieldLevel,
	UserEntityRightFieldCreationTime,
	UserEntityRightFieldRootID,
}

// UserEntityRightFieldsNames TBD
var UserEntityRightFieldsNames = [...]string{
	"id",
	"user_id",
	"entity_type",
	"entity_id",
	"level",
	"creation_time",
	"root_id",
}

// Name TBD
func (f UserEntityRightField) Name() string {
	if int(f) > len(UserEntityRightFieldsNames)-1 {
		return "unknown"
	}
	return UserEntityRightFieldsNames[f]
}

// JoinedNames TBD
func (l UserEntityRightFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l UserEntityRightFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l UserEntityRightFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l UserEntityRightFieldsList) Del(fields ...UserEntityRightField) UserEntityRightFieldsList {
	var res = make(UserEntityRightFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l UserEntityRightFieldsList) PushBack(fields ...UserEntityRightField) UserEntityRightFieldsList {
	var res = make(UserEntityRightFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l UserEntityRightFieldsList) PushFront(fields ...UserEntityRightField) UserEntityRightFieldsList {
	var res = make(UserEntityRightFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *UserEntityRight) FieldsValues(fields UserEntityRightFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *UserEntityRight) FieldValue(f UserEntityRightField) interface{} {
	switch f {
	case UserEntityRightFieldID:
		return x.ID
	case UserEntityRightFieldUserID:
		return x.UserID
	case UserEntityRightFieldEntityType:
		return string(x.EntityType)
	case UserEntityRightFieldEntityID:
		return x.EntityID
	case UserEntityRightFieldLevel:
		return string(x.Level)
	case UserEntityRightFieldCreationTime:
		return x.CreationTime
	case UserEntityRightFieldRootID:
		return x.RootID
	}
	return nil
}

// SetFieldValue TBD
func (x *UserEntityRight) SetFieldValue(f UserEntityRightField, v interface{}) error {
	switch f {
	case UserEntityRightFieldID:
		x.ID = v.(int64)
	case UserEntityRightFieldUserID:
		x.UserID = v.(int64)
	case UserEntityRightFieldEntityType:
		x.EntityType = RightEntityType(v.(string))
	case UserEntityRightFieldEntityID:
		x.EntityID = v.(int64)
	case UserEntityRightFieldLevel:
		x.Level = RightEntityLevel(v.(string))
	case UserEntityRightFieldCreationTime:
		x.CreationTime = v.(time.Time)
	case UserEntityRightFieldRootID:
		x.RootID = v.(int64)
	}
	return nil
}

// UserEntityRightQuerier TBD
type UserEntityRightQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// UserEntityRightRows TBD
type UserEntityRightRows struct {
	rows   *pgx.Rows
	fields UserEntityRightFieldsList
}

// Close TBD
func (r *UserEntityRightRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *UserEntityRightRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *UserEntityRightRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *UserEntityRightRows) ScanTo(x *UserEntityRight) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *UserEntityRightRows) Scan() (x *UserEntityRight, err error) {
	x = new(UserEntityRight)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *UserEntityRightRows) ScanAll(sizeHint int) ([]*UserEntityRight, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*UserEntityRight, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// UserEntityRightRow TBD
type UserEntityRightRow UserEntityRightRows

// ScanTo TBD
func (r *UserEntityRightRow) ScanTo(x *UserEntityRight) error {
	rows := (*UserEntityRightRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *UserEntityRightRow) Scan() (x *UserEntityRight, err error) {
	x = new(UserEntityRight)
	err = r.ScanTo(x)
	return
}

// QueryUserEntityRight TBD
func QueryUserEntityRight(q UserEntityRightQuerier, fields UserEntityRightFieldsList, sql string, args ...interface{}) (*UserEntityRightRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &UserEntityRightRows{rows: pgxRows, fields: fields}, nil
}

// QueryUserEntityRightRow TBD
func QueryUserEntityRightRow(q UserEntityRightQuerier, fields UserEntityRightFieldsList, sql string, args ...interface{}) *UserEntityRightRow {
	pgxRows, _ := q.Query(sql, args...)
	return &UserEntityRightRow{rows: pgxRows, fields: fields}
}

// ScanUserEntityRightList TBD
func ScanUserEntityRightList(q UserEntityRightQuerier, fields UserEntityRightFieldsList, sql string, args ...interface{}) ([]*UserEntityRight, error) {
	rows, err := QueryUserEntityRight(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanUserEntityRight TBD
func ScanUserEntityRight(q UserEntityRightQuerier, fields UserEntityRightFieldsList, sql string, args ...interface{}) (*UserEntityRight, error) {
	x, err := QueryUserEntityRightRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
