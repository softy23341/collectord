// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"time"

	"github.com/jackc/pgx"
)

// InviteField TBD
type InviteField int

const (
	// InviteFieldID TBD
	InviteFieldID InviteField = iota

	// InviteFieldCreatorUserID TBD
	InviteFieldCreatorUserID

	// InviteFieldRootID TBD
	InviteFieldRootID

	// InviteFieldToUserID TBD
	InviteFieldToUserID

	// InviteFieldToUserEmail TBD
	InviteFieldToUserEmail

	// InviteFieldToken TBD
	InviteFieldToken

	// InviteFieldCreationTime TBD
	InviteFieldCreationTime

	// InviteFieldStatus TBD
	InviteFieldStatus
)

// InviteFieldsList TBD
type InviteFieldsList []InviteField

// InviteAllFields TBD
var InviteAllFields = InviteFieldsList{
	InviteFieldID,
	InviteFieldCreatorUserID,
	InviteFieldRootID,
	InviteFieldToUserID,
	InviteFieldToUserEmail,
	InviteFieldToken,
	InviteFieldCreationTime,
	InviteFieldStatus,
}

// InviteFieldsNames TBD
var InviteFieldsNames = [...]string{
	"id",
	"creator_user_id",
	"root_id",
	"to_user_id",
	"to_user_email",
	"token",
	"creation_time",
	"status",
}

// Name TBD
func (f InviteField) Name() string {
	if int(f) > len(InviteFieldsNames)-1 {
		return "unknown"
	}
	return InviteFieldsNames[f]
}

// JoinedNames TBD
func (l InviteFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l InviteFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l InviteFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l InviteFieldsList) Del(fields ...InviteField) InviteFieldsList {
	var res = make(InviteFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l InviteFieldsList) PushBack(fields ...InviteField) InviteFieldsList {
	var res = make(InviteFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l InviteFieldsList) PushFront(fields ...InviteField) InviteFieldsList {
	var res = make(InviteFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *Invite) FieldsValues(fields InviteFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *Invite) FieldValue(f InviteField) interface{} {
	switch f {
	case InviteFieldID:
		return x.ID
	case InviteFieldCreatorUserID:
		return x.CreatorUserID
	case InviteFieldRootID:
		return x.RootID
	case InviteFieldToUserID:
		return &x.ToUserID
	case InviteFieldToUserEmail:
		return &x.ToUserEmail
	case InviteFieldToken:
		return x.Token
	case InviteFieldCreationTime:
		return x.CreationTime
	case InviteFieldStatus:
		return int16(x.Status)
	}
	return nil
}

// SetFieldValue TBD
func (x *Invite) SetFieldValue(f InviteField, v interface{}) error {
	switch f {
	case InviteFieldID:
		x.ID = v.(int64)
	case InviteFieldCreatorUserID:
		x.CreatorUserID = v.(int64)
	case InviteFieldRootID:
		x.RootID = v.(int64)
	case InviteFieldToUserID:
		if v == nil {
			x.ToUserID = nil
		} else {
			value := v.(int64)
			x.ToUserID = &value
		}
	case InviteFieldToUserEmail:
		if v == nil {
			x.ToUserEmail = nil
		} else {
			value := v.(string)
			x.ToUserEmail = &value
		}
	case InviteFieldToken:
		x.Token = v.(string)
	case InviteFieldCreationTime:
		x.CreationTime = v.(time.Time)
	case InviteFieldStatus:
		x.Status = InviteStatus(v.(int16))
	}
	return nil
}

// InviteQuerier TBD
type InviteQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// InviteRows TBD
type InviteRows struct {
	rows   *pgx.Rows
	fields InviteFieldsList
}

// Close TBD
func (r *InviteRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *InviteRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *InviteRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *InviteRows) ScanTo(x *Invite) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *InviteRows) Scan() (x *Invite, err error) {
	x = new(Invite)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *InviteRows) ScanAll(sizeHint int) ([]*Invite, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*Invite, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// InviteRow TBD
type InviteRow InviteRows

// ScanTo TBD
func (r *InviteRow) ScanTo(x *Invite) error {
	rows := (*InviteRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *InviteRow) Scan() (x *Invite, err error) {
	x = new(Invite)
	err = r.ScanTo(x)
	return
}

// QueryInvite TBD
func QueryInvite(q InviteQuerier, fields InviteFieldsList, sql string, args ...interface{}) (*InviteRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &InviteRows{rows: pgxRows, fields: fields}, nil
}

// QueryInviteRow TBD
func QueryInviteRow(q InviteQuerier, fields InviteFieldsList, sql string, args ...interface{}) *InviteRow {
	pgxRows, _ := q.Query(sql, args...)
	return &InviteRow{rows: pgxRows, fields: fields}
}

// ScanInviteList TBD
func ScanInviteList(q InviteQuerier, fields InviteFieldsList, sql string, args ...interface{}) ([]*Invite, error) {
	rows, err := QueryInvite(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanInvite TBD
func ScanInvite(q InviteQuerier, fields InviteFieldsList, sql string, args ...interface{}) (*Invite, error) {
	x, err := QueryInviteRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
