// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"time"

	"github.com/jackc/pgx"
)

// CollectionField TBD
type CollectionField int

const (
	// CollectionFieldID TBD
	CollectionFieldID CollectionField = iota

	// CollectionFieldName TBD
	CollectionFieldName

	// CollectionFieldRootID TBD
	CollectionFieldRootID

	// CollectionFieldUserID TBD
	CollectionFieldUserID

	// CollectionFieldUserUniqID TBD
	CollectionFieldUserUniqID

	// CollectionFieldCreationTime TBD
	CollectionFieldCreationTime

	// CollectionFieldTypo TBD
	CollectionFieldTypo

	// CollectionFieldDescription TBD
	CollectionFieldDescription

	// CollectionFieldImageMediaID TBD
	CollectionFieldImageMediaID

	// CollectionFieldPublic TBD
	CollectionFieldPublic

	// CollectionFieldIsAnonymous TBD
	CollectionFieldIsAnonymous
)

// CollectionFieldsList TBD
type CollectionFieldsList []CollectionField

// CollectionAllFields TBD
var CollectionAllFields = CollectionFieldsList{
	CollectionFieldID,
	CollectionFieldName,
	CollectionFieldRootID,
	CollectionFieldUserID,
	CollectionFieldUserUniqID,
	CollectionFieldCreationTime,
	CollectionFieldTypo,
	CollectionFieldDescription,
	CollectionFieldImageMediaID,
	CollectionFieldPublic,
	CollectionFieldIsAnonymous,
}

// CollectionFieldsNames TBD
var CollectionFieldsNames = [...]string{
	"id",
	"name",
	"root_id",
	"user_id",
	"user_uniq_id",
	"creation_time",
	"typo",
	"description",
	"image_media_id",
	"public",
	"is_anonymous",
}

// Name TBD
func (f CollectionField) Name() string {
	if int(f) > len(CollectionFieldsNames)-1 {
		return "unknown"
	}
	return CollectionFieldsNames[f]
}

// JoinedNames TBD
func (l CollectionFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l CollectionFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l CollectionFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l CollectionFieldsList) Del(fields ...CollectionField) CollectionFieldsList {
	var res = make(CollectionFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l CollectionFieldsList) PushBack(fields ...CollectionField) CollectionFieldsList {
	var res = make(CollectionFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l CollectionFieldsList) PushFront(fields ...CollectionField) CollectionFieldsList {
	var res = make(CollectionFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *Collection) FieldsValues(fields CollectionFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *Collection) FieldValue(f CollectionField) interface{} {
	switch f {
	case CollectionFieldID:
		return x.ID
	case CollectionFieldName:
		return x.Name
	case CollectionFieldRootID:
		return x.RootID
	case CollectionFieldUserID:
		return &x.UserID
	case CollectionFieldUserUniqID:
		return &x.UserUniqID
	case CollectionFieldCreationTime:
		return x.CreationTime
	case CollectionFieldTypo:
		return int16(x.Typo)
	case CollectionFieldDescription:
		return x.Description
	case CollectionFieldImageMediaID:
		return &x.ImageMediaID
	case CollectionFieldPublic:
		return x.Public
	case CollectionFieldIsAnonymous:
		return x.IsAnonymous
	}
	return nil
}

// SetFieldValue TBD
func (x *Collection) SetFieldValue(f CollectionField, v interface{}) error {
	switch f {
	case CollectionFieldID:
		x.ID = v.(int64)
	case CollectionFieldName:
		x.Name = v.(string)
	case CollectionFieldRootID:
		x.RootID = v.(int64)
	case CollectionFieldUserID:
		if v == nil {
			x.UserID = nil
		} else {
			value := v.(int64)
			x.UserID = &value
		}
	case CollectionFieldUserUniqID:
		if v == nil {
			x.UserUniqID = nil
		} else {
			value := v.(int64)
			x.UserUniqID = &value
		}
	case CollectionFieldCreationTime:
		x.CreationTime = v.(time.Time)
	case CollectionFieldTypo:
		x.Typo = CollectionTypo(v.(int16))
	case CollectionFieldDescription:
		x.Description = v.(string)
	case CollectionFieldImageMediaID:
		if v == nil {
			x.ImageMediaID = nil
		} else {
			value := v.(int64)
			x.ImageMediaID = &value
		}
	case CollectionFieldPublic:
		x.Public = v.(bool)
	case CollectionFieldIsAnonymous:
		x.IsAnonymous = v.(bool)
	}
	return nil
}

// CollectionQuerier TBD
type CollectionQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// CollectionRows TBD
type CollectionRows struct {
	rows   *pgx.Rows
	fields CollectionFieldsList
}

// Close TBD
func (r *CollectionRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *CollectionRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *CollectionRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *CollectionRows) ScanTo(x *Collection) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *CollectionRows) Scan() (x *Collection, err error) {
	x = new(Collection)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *CollectionRows) ScanAll(sizeHint int) ([]*Collection, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*Collection, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// CollectionRow TBD
type CollectionRow CollectionRows

// ScanTo TBD
func (r *CollectionRow) ScanTo(x *Collection) error {
	rows := (*CollectionRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *CollectionRow) Scan() (x *Collection, err error) {
	x = new(Collection)
	err = r.ScanTo(x)
	return
}

// QueryCollection TBD
func QueryCollection(q CollectionQuerier, fields CollectionFieldsList, sql string, args ...interface{}) (*CollectionRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &CollectionRows{rows: pgxRows, fields: fields}, nil
}

// QueryCollectionRow TBD
func QueryCollectionRow(q CollectionQuerier, fields CollectionFieldsList, sql string, args ...interface{}) *CollectionRow {
	pgxRows, _ := q.Query(sql, args...)
	return &CollectionRow{rows: pgxRows, fields: fields}
}

// ScanCollectionList TBD
func ScanCollectionList(q CollectionQuerier, fields CollectionFieldsList, sql string, args ...interface{}) ([]*Collection, error) {
	rows, err := QueryCollection(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanCollection TBD
func ScanCollection(q CollectionQuerier, fields CollectionFieldsList, sql string, args ...interface{}) (*Collection, error) {
	x, err := QueryCollectionRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
