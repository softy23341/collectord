// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"time"

	"github.com/jackc/pgx"
)

// ObjectField TBD
type ObjectField int

const (
	// ObjectFieldID TBD
	ObjectFieldID ObjectField = iota

	// ObjectFieldCollectionID TBD
	ObjectFieldCollectionID

	// ObjectFieldUserID TBD
	ObjectFieldUserID

	// ObjectFieldUserUniqID TBD
	ObjectFieldUserUniqID

	// ObjectFieldName TBD
	ObjectFieldName

	// ObjectFieldProductionDateIntervalID TBD
	ObjectFieldProductionDateIntervalID

	// ObjectFieldProductionDateIntervalFrom TBD
	ObjectFieldProductionDateIntervalFrom

	// ObjectFieldProductionDateIntervalTo TBD
	ObjectFieldProductionDateIntervalTo

	// ObjectFieldDescription TBD
	ObjectFieldDescription

	// ObjectFieldProvenance TBD
	ObjectFieldProvenance

	// ObjectFieldPurchaseDate TBD
	ObjectFieldPurchaseDate

	// ObjectFieldPurchasePrice TBD
	ObjectFieldPurchasePrice

	// ObjectFieldPurchaseCurrencyID TBD
	ObjectFieldPurchaseCurrencyID

	// ObjectFieldRootIDNumber TBD
	ObjectFieldRootIDNumber

	// ObjectFieldCreationTime TBD
	ObjectFieldCreationTime

	// ObjectFieldUpdateTime TBD
	ObjectFieldUpdateTime
)

// ObjectFieldsList TBD
type ObjectFieldsList []ObjectField

// ObjectAllFields TBD
var ObjectAllFields = ObjectFieldsList{
	ObjectFieldID,
	ObjectFieldCollectionID,
	ObjectFieldUserID,
	ObjectFieldUserUniqID,
	ObjectFieldName,
	ObjectFieldProductionDateIntervalID,
	ObjectFieldProductionDateIntervalFrom,
	ObjectFieldProductionDateIntervalTo,
	ObjectFieldDescription,
	ObjectFieldProvenance,
	ObjectFieldPurchaseDate,
	ObjectFieldPurchasePrice,
	ObjectFieldPurchaseCurrencyID,
	ObjectFieldRootIDNumber,
	ObjectFieldCreationTime,
	ObjectFieldUpdateTime,
}

// ObjectFieldsNames TBD
var ObjectFieldsNames = [...]string{
	"id",
	"collection_id",
	"user_id",
	"user_uniq_id",
	"name",
	"production_date_interval_id",
	"production_date_interval_from",
	"production_date_interval_to",
	"description",
	"provenance",
	"purchase_date",
	"purchase_price",
	"purchase_price_currency_id",
	"root_id_number",
	"creation_time",
	"update_time",
}

// Name TBD
func (f ObjectField) Name() string {
	if int(f) > len(ObjectFieldsNames)-1 {
		return "unknown"
	}
	return ObjectFieldsNames[f]
}

// JoinedNames TBD
func (l ObjectFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l ObjectFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l ObjectFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l ObjectFieldsList) Del(fields ...ObjectField) ObjectFieldsList {
	var res = make(ObjectFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l ObjectFieldsList) PushBack(fields ...ObjectField) ObjectFieldsList {
	var res = make(ObjectFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l ObjectFieldsList) PushFront(fields ...ObjectField) ObjectFieldsList {
	var res = make(ObjectFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *Object) FieldsValues(fields ObjectFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *Object) FieldValue(f ObjectField) interface{} {
	switch f {
	case ObjectFieldID:
		return x.ID
	case ObjectFieldCollectionID:
		return x.CollectionID
	case ObjectFieldUserID:
		return x.UserID
	case ObjectFieldUserUniqID:
		return x.UserUniqID
	case ObjectFieldName:
		return x.Name
	case ObjectFieldProductionDateIntervalID:
		return &x.ProductionDateIntervalID
	case ObjectFieldProductionDateIntervalFrom:
		return &x.ProductionDateIntervalFrom
	case ObjectFieldProductionDateIntervalTo:
		return &x.ProductionDateIntervalTo
	case ObjectFieldDescription:
		return x.Description
	case ObjectFieldProvenance:
		return x.Provenance
	case ObjectFieldPurchaseDate:
		return &x.PurchaseDate
	case ObjectFieldPurchasePrice:
		return &x.PurchasePrice
	case ObjectFieldPurchaseCurrencyID:
		return &x.PurchaseCurrencyID
	case ObjectFieldRootIDNumber:
		return x.RootIDNumber
	case ObjectFieldCreationTime:
		return x.CreationTime
	case ObjectFieldUpdateTime:
		return x.UpdateTime
	}
	return nil
}

// SetFieldValue TBD
func (x *Object) SetFieldValue(f ObjectField, v interface{}) error {
	switch f {
	case ObjectFieldID:
		x.ID = v.(int64)
	case ObjectFieldCollectionID:
		x.CollectionID = v.(int64)
	case ObjectFieldUserID:
		x.UserID = v.(int64)
	case ObjectFieldUserUniqID:
		x.UserUniqID = v.(int64)
	case ObjectFieldName:
		x.Name = v.(string)
	case ObjectFieldProductionDateIntervalID:
		if v == nil {
			x.ProductionDateIntervalID = nil
		} else {
			value := v.(int64)
			x.ProductionDateIntervalID = &value
		}
	case ObjectFieldProductionDateIntervalFrom:
		if v == nil {
			x.ProductionDateIntervalFrom = nil
		} else {
			value := v.(int64)
			x.ProductionDateIntervalFrom = &value
		}
	case ObjectFieldProductionDateIntervalTo:
		if v == nil {
			x.ProductionDateIntervalTo = nil
		} else {
			value := v.(int64)
			x.ProductionDateIntervalTo = &value
		}
	case ObjectFieldDescription:
		x.Description = v.(string)
	case ObjectFieldProvenance:
		x.Provenance = v.(string)
	case ObjectFieldPurchaseDate:
		if v == nil {
			x.PurchaseDate = nil
		} else {
			value := v.(time.Time)
			x.PurchaseDate = &value
		}
	case ObjectFieldPurchasePrice:
		if v == nil {
			x.PurchasePrice = nil
		} else {
			value := v.(int64)
			x.PurchasePrice = &value
		}
	case ObjectFieldPurchaseCurrencyID:
		if v == nil {
			x.PurchaseCurrencyID = nil
		} else {
			value := v.(int64)
			x.PurchaseCurrencyID = &value
		}
	case ObjectFieldRootIDNumber:
		x.RootIDNumber = v.(string)
	case ObjectFieldCreationTime:
		x.CreationTime = v.(time.Time)
	case ObjectFieldUpdateTime:
		x.UpdateTime = v.(time.Time)
	}
	return nil
}

// ObjectQuerier TBD
type ObjectQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// ObjectRows TBD
type ObjectRows struct {
	rows   *pgx.Rows
	fields ObjectFieldsList
}

// Close TBD
func (r *ObjectRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *ObjectRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *ObjectRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *ObjectRows) ScanTo(x *Object) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *ObjectRows) Scan() (x *Object, err error) {
	x = new(Object)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *ObjectRows) ScanAll(sizeHint int) ([]*Object, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*Object, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// ObjectRow TBD
type ObjectRow ObjectRows

// ScanTo TBD
func (r *ObjectRow) ScanTo(x *Object) error {
	rows := (*ObjectRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *ObjectRow) Scan() (x *Object, err error) {
	x = new(Object)
	err = r.ScanTo(x)
	return
}

// QueryObject TBD
func QueryObject(q ObjectQuerier, fields ObjectFieldsList, sql string, args ...interface{}) (*ObjectRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &ObjectRows{rows: pgxRows, fields: fields}, nil
}

// QueryObjectRow TBD
func QueryObjectRow(q ObjectQuerier, fields ObjectFieldsList, sql string, args ...interface{}) *ObjectRow {
	pgxRows, _ := q.Query(sql, args...)
	return &ObjectRow{rows: pgxRows, fields: fields}
}

// ScanObjectList TBD
func ScanObjectList(q ObjectQuerier, fields ObjectFieldsList, sql string, args ...interface{}) ([]*Object, error) {
	rows, err := QueryObject(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanObject TBD
func ScanObject(q ObjectQuerier, fields ObjectFieldsList, sql string, args ...interface{}) (*Object, error) {
	x, err := QueryObjectRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
