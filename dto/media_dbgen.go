// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mitchellh/mapstructure"

	"github.com/jackc/pgx"
)

// MediaField TBD
type MediaField int

const (
	// MediaFieldID TBD
	MediaFieldID MediaField = iota

	// MediaFieldUserID TBD
	MediaFieldUserID

	// MediaFieldUserUniqID TBD
	MediaFieldUserUniqID

	// MediaFieldType TBD
	MediaFieldType

	// MediaFieldRootID TBD
	MediaFieldRootID

	// MediaFieldMediaUnion TBD
	MediaFieldMediaUnion
)

// MediaFieldsList TBD
type MediaFieldsList []MediaField

// MediaAllFields TBD
var MediaAllFields = MediaFieldsList{
	MediaFieldID,
	MediaFieldUserID,
	MediaFieldUserUniqID,
	MediaFieldType,
	MediaFieldRootID,
	MediaFieldMediaUnion,
}

// MediaFieldsNames TBD
var MediaFieldsNames = [...]string{
	"id",
	"user_id",
	"user_uniq_id",
	"type",
	"root_id",
	"extra",
}

// Name TBD
func (f MediaField) Name() string {
	if int(f) > len(MediaFieldsNames)-1 {
		return "unknown"
	}
	return MediaFieldsNames[f]
}

// JoinedNames TBD
func (l MediaFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l MediaFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l MediaFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l MediaFieldsList) Del(fields ...MediaField) MediaFieldsList {
	var res = make(MediaFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l MediaFieldsList) PushBack(fields ...MediaField) MediaFieldsList {
	var res = make(MediaFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l MediaFieldsList) PushFront(fields ...MediaField) MediaFieldsList {
	var res = make(MediaFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *Media) FieldsValues(fields MediaFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *Media) FieldValue(f MediaField) interface{} {
	switch f {
	case MediaFieldID:
		return x.ID
	case MediaFieldUserID:
		return &x.UserID
	case MediaFieldUserUniqID:
		return &x.UserUniqID
	case MediaFieldType:
		return int16(x.Type)
	case MediaFieldRootID:
		return &x.RootID
	case MediaFieldMediaUnion:
		data, _ := json.Marshal(x.MediaUnion)
		return string(data)
	}
	return nil
}

// SetFieldValue TBD
func (x *Media) SetFieldValue(f MediaField, v interface{}) error {
	switch f {
	case MediaFieldID:
		x.ID = v.(int64)
	case MediaFieldUserID:
		if v == nil {
			x.UserID = nil
		} else {
			value := v.(int64)
			x.UserID = &value
		}
	case MediaFieldUserUniqID:
		if v == nil {
			x.UserUniqID = nil
		} else {
			value := v.(int64)
			x.UserUniqID = &value
		}
	case MediaFieldType:
		x.Type = MediaType(v.(int16))
	case MediaFieldRootID:
		if v == nil {
			x.RootID = nil
		} else {
			value := v.(int64)
			x.RootID = &value
		}
	case MediaFieldMediaUnion:
		if v != nil {
			decoder, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
				TagName: "json",
				Result:  &x.MediaUnion,
			})
			if err != nil {
				return err
			}
			err = decoder.Decode(v)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// MediaQuerier TBD
type MediaQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// MediaRows TBD
type MediaRows struct {
	rows   *pgx.Rows
	fields MediaFieldsList
}

// Close TBD
func (r *MediaRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *MediaRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *MediaRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *MediaRows) ScanTo(x *Media) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *MediaRows) Scan() (x *Media, err error) {
	x = new(Media)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *MediaRows) ScanAll(sizeHint int) ([]*Media, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*Media, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// MediaRow TBD
type MediaRow MediaRows

// ScanTo TBD
func (r *MediaRow) ScanTo(x *Media) error {
	rows := (*MediaRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *MediaRow) Scan() (x *Media, err error) {
	x = new(Media)
	err = r.ScanTo(x)
	return
}

// QueryMedia TBD
func QueryMedia(q MediaQuerier, fields MediaFieldsList, sql string, args ...interface{}) (*MediaRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &MediaRows{rows: pgxRows, fields: fields}, nil
}

// QueryMediaRow TBD
func QueryMediaRow(q MediaQuerier, fields MediaFieldsList, sql string, args ...interface{}) *MediaRow {
	pgxRows, _ := q.Query(sql, args...)
	return &MediaRow{rows: pgxRows, fields: fields}
}

// ScanMediaList TBD
func ScanMediaList(q MediaQuerier, fields MediaFieldsList, sql string, args ...interface{}) ([]*Media, error) {
	rows, err := QueryMedia(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanMedia TBD
func ScanMedia(q MediaQuerier, fields MediaFieldsList, sql string, args ...interface{}) (*Media, error) {
	x, err := QueryMediaRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
