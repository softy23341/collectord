// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"github.com/jackc/pgx/pgtype"
	"time"

	"github.com/jackc/pgx"
)

// ValuationField TBD
type ValuationField int

const (
	// ValuationFieldID TBD
	ValuationFieldID ValuationField = iota

	// ValuationFieldObjectID TBD
	ValuationFieldObjectID

	// ValuationFieldName TBD
	ValuationFieldName

	// ValuationFieldComment TBD
	ValuationFieldComment

	// ValuationFieldDate TBD
	ValuationFieldDate

	// ValuationFieldPrice TBD
	ValuationFieldPrice

	// ValuationFieldCurrencyID TBD
	ValuationFieldCurrencyID
)

// ValuationFieldsList TBD
type ValuationFieldsList []ValuationField

// ValuationAllFields TBD
var ValuationAllFields = ValuationFieldsList{
	ValuationFieldID,
	ValuationFieldObjectID,
	ValuationFieldName,
	ValuationFieldComment,
	ValuationFieldDate,
	ValuationFieldPrice,
	ValuationFieldCurrencyID,
}

// ValuationFieldsNames TBD
var ValuationFieldsNames = [...]string{
	"id",
	"object_id",
	"name",
	"comment",
	"date",
	"price",
	"price_currency_id",
}

// Name TBD
func (f ValuationField) Name() string {
	if int(f) > len(ValuationFieldsNames)-1 {
		return "unknown"
	}
	return ValuationFieldsNames[f]
}

// JoinedNames TBD
func (l ValuationFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l ValuationFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l ValuationFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l ValuationFieldsList) Del(fields ...ValuationField) ValuationFieldsList {
	var res = make(ValuationFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l ValuationFieldsList) PushBack(fields ...ValuationField) ValuationFieldsList {
	var res = make(ValuationFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l ValuationFieldsList) PushFront(fields ...ValuationField) ValuationFieldsList {
	var res = make(ValuationFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *Valuation) FieldsValues(fields ValuationFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *Valuation) FieldValue(f ValuationField) interface{} {
	switch f {
	case ValuationFieldID:
		return x.ID
	case ValuationFieldObjectID:
		return x.ObjectID
	case ValuationFieldName:
		return x.Name
	case ValuationFieldComment:
		return x.Comment
	case ValuationFieldDate:
		return &x.Date
	case ValuationFieldPrice:
		return &x.Price
	case ValuationFieldCurrencyID:
		return &x.CurrencyID
	}
	return nil
}

// SetFieldValue TBD
func (x *Valuation) SetFieldValue(f ValuationField, v interface{}) error {
	switch f {
	case ValuationFieldID:
		x.ID = v.(int64)
	case ValuationFieldObjectID:
		x.ObjectID = v.(int64)
	case ValuationFieldName:
		x.Name = v.(string)
	case ValuationFieldComment:
		x.Comment = v.(string)
	case ValuationFieldDate:
		if v == nil {
			x.Date = nil
		} else {
			value := v.(time.Time)
			x.Date = &value
		}
	case ValuationFieldPrice:
		if v == nil {
			x.Price = nil
		} else {
			value := v.(*pgtype.Int8range)
			x.Price = new(pgtype.Int8range)
			*x.Price = *value
		}
	case ValuationFieldCurrencyID:
		if v == nil {
			x.CurrencyID = nil
		} else {
			value := v.(int64)
			x.CurrencyID = &value
		}
	}
	return nil
}

// ValuationQuerier TBD
type ValuationQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// ValuationRows TBD
type ValuationRows struct {
	rows   *pgx.Rows
	fields ValuationFieldsList
}

// Close TBD
func (r *ValuationRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *ValuationRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *ValuationRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *ValuationRows) ScanTo(x *Valuation) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *ValuationRows) Scan() (x *Valuation, err error) {
	x = new(Valuation)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *ValuationRows) ScanAll(sizeHint int) ([]*Valuation, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*Valuation, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// ValuationRow TBD
type ValuationRow ValuationRows

// ScanTo TBD
func (r *ValuationRow) ScanTo(x *Valuation) error {
	rows := (*ValuationRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *ValuationRow) Scan() (x *Valuation, err error) {
	x = new(Valuation)
	err = r.ScanTo(x)
	return
}

// QueryValuation TBD
func QueryValuation(q ValuationQuerier, fields ValuationFieldsList, sql string, args ...interface{}) (*ValuationRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &ValuationRows{rows: pgxRows, fields: fields}, nil
}

// QueryValuationRow TBD
func QueryValuationRow(q ValuationQuerier, fields ValuationFieldsList, sql string, args ...interface{}) *ValuationRow {
	pgxRows, _ := q.Query(sql, args...)
	return &ValuationRow{rows: pgxRows, fields: fields}
}

// ScanValuationList TBD
func ScanValuationList(q ValuationQuerier, fields ValuationFieldsList, sql string, args ...interface{}) ([]*Valuation, error) {
	rows, err := QueryValuation(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanValuation TBD
func ScanValuation(q ValuationQuerier, fields ValuationFieldsList, sql string, args ...interface{}) (*Valuation, error) {
	x, err := QueryValuationRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
