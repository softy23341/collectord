// !! Autogenerated file, do not edit!
package dto

import (
	"bytes"
	"errors"
	"fmt"
	"time"

	"github.com/jackc/pgx"
)

// ObjectStatusRefField TBD
type ObjectStatusRefField int

const (
	// ObjectStatusRefFieldID TBD
	ObjectStatusRefFieldID ObjectStatusRefField = iota

	// ObjectStatusRefFieldObjectID TBD
	ObjectStatusRefFieldObjectID

	// ObjectStatusRefFieldObjectStatusID TBD
	ObjectStatusRefFieldObjectStatusID

	// ObjectStatusRefFieldStartDate TBD
	ObjectStatusRefFieldStartDate

	// ObjectStatusRefFieldNotificationDate TBD
	ObjectStatusRefFieldNotificationDate

	// ObjectStatusRefFieldCreationTime TBD
	ObjectStatusRefFieldCreationTime

	// ObjectStatusRefFieldDescription TBD
	ObjectStatusRefFieldDescription
)

// ObjectStatusRefFieldsList TBD
type ObjectStatusRefFieldsList []ObjectStatusRefField

// ObjectStatusRefAllFields TBD
var ObjectStatusRefAllFields = ObjectStatusRefFieldsList{
	ObjectStatusRefFieldID,
	ObjectStatusRefFieldObjectID,
	ObjectStatusRefFieldObjectStatusID,
	ObjectStatusRefFieldStartDate,
	ObjectStatusRefFieldNotificationDate,
	ObjectStatusRefFieldCreationTime,
	ObjectStatusRefFieldDescription,
}

// ObjectStatusRefFieldsNames TBD
var ObjectStatusRefFieldsNames = [...]string{
	"id",
	"object_id",
	"object_status_id",
	"start_date",
	"notification_date",
	"creation_time",
	"description",
}

// Name TBD
func (f ObjectStatusRefField) Name() string {
	if int(f) > len(ObjectStatusRefFieldsNames)-1 {
		return "unknown"
	}
	return ObjectStatusRefFieldsNames[f]
}

// JoinedNames TBD
func (l ObjectStatusRefFieldsList) JoinedNames() string {
	return l.JoinedNamesWithAlias("")
}

// JoinedNamesWithAlias TBD
func (l ObjectStatusRefFieldsList) JoinedNamesWithAlias(alias string) string {
	var aliasPrefix string
	if alias != "" {
		aliasPrefix = alias + "."
	}

	var buf bytes.Buffer
	for idx, f := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(aliasPrefix)
		buf.WriteString("\"")
		buf.WriteString(f.Name())
		buf.WriteString("\"")
	}
	return buf.String()
}

// Placeholders TBD
func (l ObjectStatusRefFieldsList) Placeholders() string {
	var buf bytes.Buffer
	for idx := range l {
		if idx != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(fmt.Sprint("$", idx+1))
	}
	return buf.String()
}

// Del TBD
func (l ObjectStatusRefFieldsList) Del(fields ...ObjectStatusRefField) ObjectStatusRefFieldsList {
	var res = make(ObjectStatusRefFieldsList, 0, len(l))
	for _, srcFld := range l {
		remove := false
		for _, delFld := range fields {
			if srcFld == delFld {
				remove = true
				break
			}
		}
		if !remove {
			res = append(res, srcFld)
		}
	}
	return res
}

// PushBack TBD
func (l ObjectStatusRefFieldsList) PushBack(fields ...ObjectStatusRefField) ObjectStatusRefFieldsList {
	var res = make(ObjectStatusRefFieldsList, 0, len(l)+len(fields))
	for _, f := range l {
		res = append(res, f)
	}
	for _, f := range fields {
		res = append(res, f)
	}
	return res
}

// PushFront TBD
func (l ObjectStatusRefFieldsList) PushFront(fields ...ObjectStatusRefField) ObjectStatusRefFieldsList {
	var res = make(ObjectStatusRefFieldsList, 0, len(l)+len(fields))
	for _, f := range fields {
		res = append(res, f)
	}
	for _, f := range l {
		res = append(res, f)
	}
	return res
}

// FieldsValues TBD
func (x *ObjectStatusRef) FieldsValues(fields ObjectStatusRefFieldsList) []interface{} {
	values := make([]interface{}, 0, len(fields))
	for _, f := range fields {
		values = append(values, x.FieldValue(f))
	}
	return values
}

// FieldValue TBD
func (x *ObjectStatusRef) FieldValue(f ObjectStatusRefField) interface{} {
	switch f {
	case ObjectStatusRefFieldID:
		return x.ID
	case ObjectStatusRefFieldObjectID:
		return x.ObjectID
	case ObjectStatusRefFieldObjectStatusID:
		return x.ObjectStatusID
	case ObjectStatusRefFieldStartDate:
		return x.StartDate
	case ObjectStatusRefFieldNotificationDate:
		return &x.NotificationDate
	case ObjectStatusRefFieldCreationTime:
		return x.CreationTime
	case ObjectStatusRefFieldDescription:
		return x.Description
	}
	return nil
}

// SetFieldValue TBD
func (x *ObjectStatusRef) SetFieldValue(f ObjectStatusRefField, v interface{}) error {
	switch f {
	case ObjectStatusRefFieldID:
		x.ID = v.(int64)
	case ObjectStatusRefFieldObjectID:
		x.ObjectID = v.(int64)
	case ObjectStatusRefFieldObjectStatusID:
		x.ObjectStatusID = v.(int64)
	case ObjectStatusRefFieldStartDate:
		x.StartDate = v.(time.Time)
	case ObjectStatusRefFieldNotificationDate:
		if v == nil {
			x.NotificationDate = nil
		} else {
			value := v.(time.Time)
			x.NotificationDate = &value
		}
	case ObjectStatusRefFieldCreationTime:
		x.CreationTime = v.(time.Time)
	case ObjectStatusRefFieldDescription:
		x.Description = v.(string)
	}
	return nil
}

// ObjectStatusRefQuerier TBD
type ObjectStatusRefQuerier interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
}

// ObjectStatusRefRows TBD
type ObjectStatusRefRows struct {
	rows   *pgx.Rows
	fields ObjectStatusRefFieldsList
}

// Close TBD
func (r *ObjectStatusRefRows) Close() {
	if r.rows == nil {
		return
	}
	r.rows.Close()
}

// Next TBD
func (r *ObjectStatusRefRows) Next() bool {
	if r.rows == nil {
		return false
	}

	return r.rows.Next()
}

// Err TBD
func (r *ObjectStatusRefRows) Err() error {
	if r.rows == nil {
		return errors.New("empty rows")
	}
	return r.rows.Err()
}

// ScanTo TBD
func (r *ObjectStatusRefRows) ScanTo(x *ObjectStatusRef) error {
	values, err := r.rows.Values()
	if err != nil {
		return err
	}
	for idx, v := range values {
		if err := x.SetFieldValue(r.fields[idx], v); err != nil {
			return err
		}
	}

	return nil
}

// Scan TBD
func (r *ObjectStatusRefRows) Scan() (x *ObjectStatusRef, err error) {
	x = new(ObjectStatusRef)
	err = r.ScanTo(x)
	return
}

// ScanAll TBD
func (r *ObjectStatusRefRows) ScanAll(sizeHint int) ([]*ObjectStatusRef, error) {
	defer r.Close()

	if sizeHint == 0 {
		sizeHint = 10
	}

	var list = make([]*ObjectStatusRef, 0, sizeHint)

	for r.Next() {
		item, err := r.Scan()
		if err != nil {
			return list, err
		}
		list = append(list, item)
	}

	return list, r.Err()
}

// ObjectStatusRefRow TBD
type ObjectStatusRefRow ObjectStatusRefRows

// ScanTo TBD
func (r *ObjectStatusRefRow) ScanTo(x *ObjectStatusRef) error {
	rows := (*ObjectStatusRefRows)(r)
	defer rows.Close()

	if rows.Err() != nil {
		return rows.Err()
	}

	if !rows.Next() {
		if rows.Err() == nil {
			return pgx.ErrNoRows
		}
		return rows.Err()
	}

	return rows.ScanTo(x)
}

// Scan TBD
func (r *ObjectStatusRefRow) Scan() (x *ObjectStatusRef, err error) {
	x = new(ObjectStatusRef)
	err = r.ScanTo(x)
	return
}

// QueryObjectStatusRef TBD
func QueryObjectStatusRef(q ObjectStatusRefQuerier, fields ObjectStatusRefFieldsList, sql string, args ...interface{}) (*ObjectStatusRefRows, error) {
	pgxRows, err := q.Query(sql, args...)
	if err != nil {
		return nil, err
	}

	return &ObjectStatusRefRows{rows: pgxRows, fields: fields}, nil
}

// QueryObjectStatusRefRow TBD
func QueryObjectStatusRefRow(q ObjectStatusRefQuerier, fields ObjectStatusRefFieldsList, sql string, args ...interface{}) *ObjectStatusRefRow {
	pgxRows, _ := q.Query(sql, args...)
	return &ObjectStatusRefRow{rows: pgxRows, fields: fields}
}

// ScanObjectStatusRefList TBD
func ScanObjectStatusRefList(q ObjectStatusRefQuerier, fields ObjectStatusRefFieldsList, sql string, args ...interface{}) ([]*ObjectStatusRef, error) {
	rows, err := QueryObjectStatusRef(q, fields, sql, args...)
	if err != nil {
		return nil, err
	}
	return rows.ScanAll(0)
}

// ScanObjectStatusRef TBD
func ScanObjectStatusRef(q ObjectStatusRefQuerier, fields ObjectStatusRefFieldsList, sql string, args ...interface{}) (*ObjectStatusRef, error) {
	x, err := QueryObjectStatusRefRow(q, fields, sql, args...).Scan()
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	return x, err
}
