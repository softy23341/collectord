// Code generated by go-swagger; DO NOT EDIT.

package originlocations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// GetOriginLocationGetOKCode is the HTTP code returned for type GetOriginLocationGetOK
const GetOriginLocationGetOKCode int = 200

/*GetOriginLocationGetOK originLocations list for selected root

swagger:response getOriginLocationGetOK
*/
type GetOriginLocationGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.AOriginLocations `json:"body,omitempty"`
}

// NewGetOriginLocationGetOK creates GetOriginLocationGetOK with default headers values
func NewGetOriginLocationGetOK() *GetOriginLocationGetOK {

	return &GetOriginLocationGetOK{}
}

// WithPayload adds the payload to the get origin location get o k response
func (o *GetOriginLocationGetOK) WithPayload(payload *models.AOriginLocations) *GetOriginLocationGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get origin location get o k response
func (o *GetOriginLocationGetOK) SetPayload(payload *models.AOriginLocations) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOriginLocationGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOriginLocationGetForbiddenCode is the HTTP code returned for type GetOriginLocationGetForbidden
const GetOriginLocationGetForbiddenCode int = 403

/*GetOriginLocationGetForbidden access forbidden

swagger:response getOriginLocationGetForbidden
*/
type GetOriginLocationGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOriginLocationGetForbidden creates GetOriginLocationGetForbidden with default headers values
func NewGetOriginLocationGetForbidden() *GetOriginLocationGetForbidden {

	return &GetOriginLocationGetForbidden{}
}

// WithPayload adds the payload to the get origin location get forbidden response
func (o *GetOriginLocationGetForbidden) WithPayload(payload *models.Error) *GetOriginLocationGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get origin location get forbidden response
func (o *GetOriginLocationGetForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOriginLocationGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetOriginLocationGetDefault Unexpected error

swagger:response getOriginLocationGetDefault
*/
type GetOriginLocationGetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOriginLocationGetDefault creates GetOriginLocationGetDefault with default headers values
func NewGetOriginLocationGetDefault(code int) *GetOriginLocationGetDefault {
	if code <= 0 {
		code = 500
	}

	return &GetOriginLocationGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get origin location get default response
func (o *GetOriginLocationGetDefault) WithStatusCode(code int) *GetOriginLocationGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get origin location get default response
func (o *GetOriginLocationGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get origin location get default response
func (o *GetOriginLocationGetDefault) WithPayload(payload *models.Error) *GetOriginLocationGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get origin location get default response
func (o *GetOriginLocationGetDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOriginLocationGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
