// Code generated by go-swagger; DO NOT EDIT.

package originlocations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOriginLocationNewHandlerFunc turns a function with the right signature into a post origin location new handler
type PostOriginLocationNewHandlerFunc func(PostOriginLocationNewParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOriginLocationNewHandlerFunc) Handle(params PostOriginLocationNewParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostOriginLocationNewHandler interface for that can handle valid post origin location new params
type PostOriginLocationNewHandler interface {
	Handle(PostOriginLocationNewParams, interface{}) middleware.Responder
}

// NewPostOriginLocationNew creates a new http.Handler for the post origin location new operation
func NewPostOriginLocationNew(ctx *middleware.Context, handler PostOriginLocationNewHandler) *PostOriginLocationNew {
	return &PostOriginLocationNew{Context: ctx, Handler: handler}
}

/*PostOriginLocationNew swagger:route POST /origin-location/new Originlocations postOriginLocationNew

create origin-location

*/
type PostOriginLocationNew struct {
	Context *middleware.Context
	Handler PostOriginLocationNewHandler
}

func (o *PostOriginLocationNew) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOriginLocationNewParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
