// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostObjectsSearchOKCode is the HTTP code returned for type PostObjectsSearchOK
const PostObjectsSearchOKCode int = 200

/*PostObjectsSearchOK Success

swagger:response postObjectsSearchOK
*/
type PostObjectsSearchOK struct {

	/*
	  In: Body
	*/
	Payload *models.ASearchObjects `json:"body,omitempty"`
}

// NewPostObjectsSearchOK creates PostObjectsSearchOK with default headers values
func NewPostObjectsSearchOK() *PostObjectsSearchOK {

	return &PostObjectsSearchOK{}
}

// WithPayload adds the payload to the post objects search o k response
func (o *PostObjectsSearchOK) WithPayload(payload *models.ASearchObjects) *PostObjectsSearchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post objects search o k response
func (o *PostObjectsSearchOK) SetPayload(payload *models.ASearchObjects) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostObjectsSearchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostObjectsSearchForbiddenCode is the HTTP code returned for type PostObjectsSearchForbidden
const PostObjectsSearchForbiddenCode int = 403

/*PostObjectsSearchForbidden Forbidden

swagger:response postObjectsSearchForbidden
*/
type PostObjectsSearchForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostObjectsSearchForbidden creates PostObjectsSearchForbidden with default headers values
func NewPostObjectsSearchForbidden() *PostObjectsSearchForbidden {

	return &PostObjectsSearchForbidden{}
}

// WithPayload adds the payload to the post objects search forbidden response
func (o *PostObjectsSearchForbidden) WithPayload(payload *models.Error) *PostObjectsSearchForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post objects search forbidden response
func (o *PostObjectsSearchForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostObjectsSearchForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostObjectsSearchDefault Unexpected error

swagger:response postObjectsSearchDefault
*/
type PostObjectsSearchDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostObjectsSearchDefault creates PostObjectsSearchDefault with default headers values
func NewPostObjectsSearchDefault(code int) *PostObjectsSearchDefault {
	if code <= 0 {
		code = 500
	}

	return &PostObjectsSearchDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post objects search default response
func (o *PostObjectsSearchDefault) WithStatusCode(code int) *PostObjectsSearchDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post objects search default response
func (o *PostObjectsSearchDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post objects search default response
func (o *PostObjectsSearchDefault) WithPayload(payload *models.Error) *PostObjectsSearchDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post objects search default response
func (o *PostObjectsSearchDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostObjectsSearchDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
