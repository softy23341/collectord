// Code generated by go-swagger; DO NOT EDIT.

package medias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/strfmt"
)

// NewPostMediasParams creates a new PostMediasParams object
// no default values defined in spec.
func NewPostMediasParams() PostMediasParams {
	return PostMediasParams{}
}

// PostMediasParams contains all the bound params for the post medias operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostMedias
type PostMediasParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	ClientUniqID *int64
	/*MediaTypePhoto       MediaType = 1   - just photo
	MediaTypePhotoObject           = 2   - object photo
	MediaTypeAvatar                = 10  - avatar
	MediaTypeCollection            = 15  - collection
	MediaTypeMsg                   = 20  - msg media
	MediaTypeDocument              = 101 - reserved
	MediaTypeVideo                 = 201 - reserved
	MediaTypeMapPoint              = 301 - reserved

	  In: formData
	*/
	File *runtime.File
	/*
	  In: formData
	*/
	Typo *int16
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostMediasParams() beforehand.
func (o *PostMediasParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdClientUniqID, fdhkClientUniqID, _ := fds.GetOK("clientUniqID")
	if err := o.bindClientUniqID(fdClientUniqID, fdhkClientUniqID, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	fdTypo, fdhkTypo, _ := fds.GetOK("typo")
	if err := o.bindTypo(fdTypo, fdhkTypo, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMediasParams) bindClientUniqID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("clientUniqID", "formData", "int64", raw)
	}
	o.ClientUniqID = &value

	return nil
}

func (o *PostMediasParams) bindTypo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt16(raw)
	if err != nil {
		return errors.InvalidType("typo", "formData", "int16", raw)
	}
	o.Typo = &value

	return nil
}
