// Code generated by go-swagger; DO NOT EDIT.

package medias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// GetMediasByIdsOKCode is the HTTP code returned for type GetMediasByIdsOK
const GetMediasByIdsOKCode int = 200

/*GetMediasByIdsOK medias list

swagger:response getMediasByIdsOK
*/
type GetMediasByIdsOK struct {

	/*
	  In: Body
	*/
	Payload *models.AGetMediasByIds `json:"body,omitempty"`
}

// NewGetMediasByIdsOK creates GetMediasByIdsOK with default headers values
func NewGetMediasByIdsOK() *GetMediasByIdsOK {

	return &GetMediasByIdsOK{}
}

// WithPayload adds the payload to the get medias by ids o k response
func (o *GetMediasByIdsOK) WithPayload(payload *models.AGetMediasByIds) *GetMediasByIdsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get medias by ids o k response
func (o *GetMediasByIdsOK) SetPayload(payload *models.AGetMediasByIds) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMediasByIdsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMediasByIdsForbiddenCode is the HTTP code returned for type GetMediasByIdsForbidden
const GetMediasByIdsForbiddenCode int = 403

/*GetMediasByIdsForbidden Forbidden

swagger:response getMediasByIdsForbidden
*/
type GetMediasByIdsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMediasByIdsForbidden creates GetMediasByIdsForbidden with default headers values
func NewGetMediasByIdsForbidden() *GetMediasByIdsForbidden {

	return &GetMediasByIdsForbidden{}
}

// WithPayload adds the payload to the get medias by ids forbidden response
func (o *GetMediasByIdsForbidden) WithPayload(payload *models.Error) *GetMediasByIdsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get medias by ids forbidden response
func (o *GetMediasByIdsForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMediasByIdsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetMediasByIdsDefault Unexpected error

swagger:response getMediasByIdsDefault
*/
type GetMediasByIdsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMediasByIdsDefault creates GetMediasByIdsDefault with default headers values
func NewGetMediasByIdsDefault(code int) *GetMediasByIdsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetMediasByIdsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get medias by ids default response
func (o *GetMediasByIdsDefault) WithStatusCode(code int) *GetMediasByIdsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get medias by ids default response
func (o *GetMediasByIdsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get medias by ids default response
func (o *GetMediasByIdsDefault) WithPayload(payload *models.Error) *GetMediasByIdsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get medias by ids default response
func (o *GetMediasByIdsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMediasByIdsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
