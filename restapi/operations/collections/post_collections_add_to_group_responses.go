// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostCollectionsAddToGroupNoContentCode is the HTTP code returned for type PostCollectionsAddToGroupNoContent
const PostCollectionsAddToGroupNoContentCode int = 204

/*PostCollectionsAddToGroupNoContent Success

swagger:response postCollectionsAddToGroupNoContent
*/
type PostCollectionsAddToGroupNoContent struct {
}

// NewPostCollectionsAddToGroupNoContent creates PostCollectionsAddToGroupNoContent with default headers values
func NewPostCollectionsAddToGroupNoContent() *PostCollectionsAddToGroupNoContent {

	return &PostCollectionsAddToGroupNoContent{}
}

// WriteResponse to the client
func (o *PostCollectionsAddToGroupNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PostCollectionsAddToGroupForbiddenCode is the HTTP code returned for type PostCollectionsAddToGroupForbidden
const PostCollectionsAddToGroupForbiddenCode int = 403

/*PostCollectionsAddToGroupForbidden Forbidden

swagger:response postCollectionsAddToGroupForbidden
*/
type PostCollectionsAddToGroupForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostCollectionsAddToGroupForbidden creates PostCollectionsAddToGroupForbidden with default headers values
func NewPostCollectionsAddToGroupForbidden() *PostCollectionsAddToGroupForbidden {

	return &PostCollectionsAddToGroupForbidden{}
}

// WithPayload adds the payload to the post collections add to group forbidden response
func (o *PostCollectionsAddToGroupForbidden) WithPayload(payload *models.Error) *PostCollectionsAddToGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post collections add to group forbidden response
func (o *PostCollectionsAddToGroupForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCollectionsAddToGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostCollectionsAddToGroupDefault Unexpected error

swagger:response postCollectionsAddToGroupDefault
*/
type PostCollectionsAddToGroupDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostCollectionsAddToGroupDefault creates PostCollectionsAddToGroupDefault with default headers values
func NewPostCollectionsAddToGroupDefault(code int) *PostCollectionsAddToGroupDefault {
	if code <= 0 {
		code = 500
	}

	return &PostCollectionsAddToGroupDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post collections add to group default response
func (o *PostCollectionsAddToGroupDefault) WithStatusCode(code int) *PostCollectionsAddToGroupDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post collections add to group default response
func (o *PostCollectionsAddToGroupDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post collections add to group default response
func (o *PostCollectionsAddToGroupDefault) WithPayload(payload *models.Error) *PostCollectionsAddToGroupDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post collections add to group default response
func (o *PostCollectionsAddToGroupDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCollectionsAddToGroupDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
