// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutCollectionsIDHandlerFunc turns a function with the right signature into a put collections ID handler
type PutCollectionsIDHandlerFunc func(PutCollectionsIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCollectionsIDHandlerFunc) Handle(params PutCollectionsIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutCollectionsIDHandler interface for that can handle valid put collections ID params
type PutCollectionsIDHandler interface {
	Handle(PutCollectionsIDParams, interface{}) middleware.Responder
}

// NewPutCollectionsID creates a new http.Handler for the put collections ID operation
func NewPutCollectionsID(ctx *middleware.Context, handler PutCollectionsIDHandler) *PutCollectionsID {
	return &PutCollectionsID{Context: ctx, Handler: handler}
}

/*PutCollectionsID swagger:route PUT /collections/{ID} Collections putCollectionsId

Collection edit

*/
type PutCollectionsID struct {
	Context *middleware.Context
	Handler PutCollectionsIDHandler
}

func (o *PutCollectionsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutCollectionsIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
