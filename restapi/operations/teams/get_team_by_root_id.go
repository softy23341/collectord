// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTeamByRootIDHandlerFunc turns a function with the right signature into a get team by root ID handler
type GetTeamByRootIDHandlerFunc func(GetTeamByRootIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTeamByRootIDHandlerFunc) Handle(params GetTeamByRootIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTeamByRootIDHandler interface for that can handle valid get team by root ID params
type GetTeamByRootIDHandler interface {
	Handle(GetTeamByRootIDParams, interface{}) middleware.Responder
}

// NewGetTeamByRootID creates a new http.Handler for the get team by root ID operation
func NewGetTeamByRootID(ctx *middleware.Context, handler GetTeamByRootIDHandler) *GetTeamByRootID {
	return &GetTeamByRootID{Context: ctx, Handler: handler}
}

/*GetTeamByRootID swagger:route GET /team/by-root-id Teams getTeamByRootId

GetTeamByRootID get team by root ID API

*/
type GetTeamByRootID struct {
	Context *middleware.Context
	Handler GetTeamByRootIDHandler
}

func (o *GetTeamByRootID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTeamByRootIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
