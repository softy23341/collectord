// Code generated by go-swagger; DO NOT EDIT.

package nameddateintervals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// GetNamedDateIntervalGetOKCode is the HTTP code returned for type GetNamedDateIntervalGetOK
const GetNamedDateIntervalGetOKCode int = 200

/*GetNamedDateIntervalGetOK named date intervals for selected root

swagger:response getNamedDateIntervalGetOK
*/
type GetNamedDateIntervalGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.ANamedDateIntervals `json:"body,omitempty"`
}

// NewGetNamedDateIntervalGetOK creates GetNamedDateIntervalGetOK with default headers values
func NewGetNamedDateIntervalGetOK() *GetNamedDateIntervalGetOK {

	return &GetNamedDateIntervalGetOK{}
}

// WithPayload adds the payload to the get named date interval get o k response
func (o *GetNamedDateIntervalGetOK) WithPayload(payload *models.ANamedDateIntervals) *GetNamedDateIntervalGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get named date interval get o k response
func (o *GetNamedDateIntervalGetOK) SetPayload(payload *models.ANamedDateIntervals) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamedDateIntervalGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNamedDateIntervalGetForbiddenCode is the HTTP code returned for type GetNamedDateIntervalGetForbidden
const GetNamedDateIntervalGetForbiddenCode int = 403

/*GetNamedDateIntervalGetForbidden access forbidden

swagger:response getNamedDateIntervalGetForbidden
*/
type GetNamedDateIntervalGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNamedDateIntervalGetForbidden creates GetNamedDateIntervalGetForbidden with default headers values
func NewGetNamedDateIntervalGetForbidden() *GetNamedDateIntervalGetForbidden {

	return &GetNamedDateIntervalGetForbidden{}
}

// WithPayload adds the payload to the get named date interval get forbidden response
func (o *GetNamedDateIntervalGetForbidden) WithPayload(payload *models.Error) *GetNamedDateIntervalGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get named date interval get forbidden response
func (o *GetNamedDateIntervalGetForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamedDateIntervalGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetNamedDateIntervalGetDefault Unexpected error

swagger:response getNamedDateIntervalGetDefault
*/
type GetNamedDateIntervalGetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNamedDateIntervalGetDefault creates GetNamedDateIntervalGetDefault with default headers values
func NewGetNamedDateIntervalGetDefault(code int) *GetNamedDateIntervalGetDefault {
	if code <= 0 {
		code = 500
	}

	return &GetNamedDateIntervalGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get named date interval get default response
func (o *GetNamedDateIntervalGetDefault) WithStatusCode(code int) *GetNamedDateIntervalGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get named date interval get default response
func (o *GetNamedDateIntervalGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get named date interval get default response
func (o *GetNamedDateIntervalGetDefault) WithPayload(payload *models.Error) *GetNamedDateIntervalGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get named date interval get default response
func (o *GetNamedDateIntervalGetDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamedDateIntervalGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
