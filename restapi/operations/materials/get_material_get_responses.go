// Code generated by go-swagger; DO NOT EDIT.

package materials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// GetMaterialGetOKCode is the HTTP code returned for type GetMaterialGetOK
const GetMaterialGetOKCode int = 200

/*GetMaterialGetOK materials list for selected root

swagger:response getMaterialGetOK
*/
type GetMaterialGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.AMaterials `json:"body,omitempty"`
}

// NewGetMaterialGetOK creates GetMaterialGetOK with default headers values
func NewGetMaterialGetOK() *GetMaterialGetOK {

	return &GetMaterialGetOK{}
}

// WithPayload adds the payload to the get material get o k response
func (o *GetMaterialGetOK) WithPayload(payload *models.AMaterials) *GetMaterialGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get material get o k response
func (o *GetMaterialGetOK) SetPayload(payload *models.AMaterials) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMaterialGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMaterialGetForbiddenCode is the HTTP code returned for type GetMaterialGetForbidden
const GetMaterialGetForbiddenCode int = 403

/*GetMaterialGetForbidden access forbidden

swagger:response getMaterialGetForbidden
*/
type GetMaterialGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMaterialGetForbidden creates GetMaterialGetForbidden with default headers values
func NewGetMaterialGetForbidden() *GetMaterialGetForbidden {

	return &GetMaterialGetForbidden{}
}

// WithPayload adds the payload to the get material get forbidden response
func (o *GetMaterialGetForbidden) WithPayload(payload *models.Error) *GetMaterialGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get material get forbidden response
func (o *GetMaterialGetForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMaterialGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetMaterialGetDefault Unexpected error

swagger:response getMaterialGetDefault
*/
type GetMaterialGetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMaterialGetDefault creates GetMaterialGetDefault with default headers values
func NewGetMaterialGetDefault(code int) *GetMaterialGetDefault {
	if code <= 0 {
		code = 500
	}

	return &GetMaterialGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get material get default response
func (o *GetMaterialGetDefault) WithStatusCode(code int) *GetMaterialGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get material get default response
func (o *GetMaterialGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get material get default response
func (o *GetMaterialGetDefault) WithPayload(payload *models.Error) *GetMaterialGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get material get default response
func (o *GetMaterialGetDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMaterialGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
