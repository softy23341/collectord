// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAuthRegConfirmEmailHandlerFunc turns a function with the right signature into a get auth reg confirm email handler
type GetAuthRegConfirmEmailHandlerFunc func(GetAuthRegConfirmEmailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAuthRegConfirmEmailHandlerFunc) Handle(params GetAuthRegConfirmEmailParams) middleware.Responder {
	return fn(params)
}

// GetAuthRegConfirmEmailHandler interface for that can handle valid get auth reg confirm email params
type GetAuthRegConfirmEmailHandler interface {
	Handle(GetAuthRegConfirmEmailParams) middleware.Responder
}

// NewGetAuthRegConfirmEmail creates a new http.Handler for the get auth reg confirm email operation
func NewGetAuthRegConfirmEmail(ctx *middleware.Context, handler GetAuthRegConfirmEmailHandler) *GetAuthRegConfirmEmail {
	return &GetAuthRegConfirmEmail{Context: ctx, Handler: handler}
}

/*GetAuthRegConfirmEmail swagger:route GET /auth/reg/confirm-email Auth getAuthRegConfirmEmail

Confirm email

*/
type GetAuthRegConfirmEmail struct {
	Context *middleware.Context
	Handler GetAuthRegConfirmEmailHandler
}

func (o *GetAuthRegConfirmEmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAuthRegConfirmEmailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
