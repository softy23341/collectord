// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostMessageReadHistoryOKCode is the HTTP code returned for type PostMessageReadHistoryOK
const PostMessageReadHistoryOKCode int = 200

/*PostMessageReadHistoryOK Successful readed

swagger:response postMessageReadHistoryOK
*/
type PostMessageReadHistoryOK struct {

	/*
	  In: Body
	*/
	Payload *models.AReadHistory `json:"body,omitempty"`
}

// NewPostMessageReadHistoryOK creates PostMessageReadHistoryOK with default headers values
func NewPostMessageReadHistoryOK() *PostMessageReadHistoryOK {

	return &PostMessageReadHistoryOK{}
}

// WithPayload adds the payload to the post message read history o k response
func (o *PostMessageReadHistoryOK) WithPayload(payload *models.AReadHistory) *PostMessageReadHistoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message read history o k response
func (o *PostMessageReadHistoryOK) SetPayload(payload *models.AReadHistory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageReadHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMessageReadHistoryForbiddenCode is the HTTP code returned for type PostMessageReadHistoryForbidden
const PostMessageReadHistoryForbiddenCode int = 403

/*PostMessageReadHistoryForbidden Forbidden

swagger:response postMessageReadHistoryForbidden
*/
type PostMessageReadHistoryForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageReadHistoryForbidden creates PostMessageReadHistoryForbidden with default headers values
func NewPostMessageReadHistoryForbidden() *PostMessageReadHistoryForbidden {

	return &PostMessageReadHistoryForbidden{}
}

// WithPayload adds the payload to the post message read history forbidden response
func (o *PostMessageReadHistoryForbidden) WithPayload(payload *models.Error) *PostMessageReadHistoryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message read history forbidden response
func (o *PostMessageReadHistoryForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageReadHistoryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostMessageReadHistoryDefault Unexpected error

swagger:response postMessageReadHistoryDefault
*/
type PostMessageReadHistoryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageReadHistoryDefault creates PostMessageReadHistoryDefault with default headers values
func NewPostMessageReadHistoryDefault(code int) *PostMessageReadHistoryDefault {
	if code <= 0 {
		code = 500
	}

	return &PostMessageReadHistoryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post message read history default response
func (o *PostMessageReadHistoryDefault) WithStatusCode(code int) *PostMessageReadHistoryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post message read history default response
func (o *PostMessageReadHistoryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post message read history default response
func (o *PostMessageReadHistoryDefault) WithPayload(payload *models.Error) *PostMessageReadHistoryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message read history default response
func (o *PostMessageReadHistoryDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageReadHistoryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
