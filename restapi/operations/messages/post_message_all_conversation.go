// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostMessageAllConversationHandlerFunc turns a function with the right signature into a post message all conversation handler
type PostMessageAllConversationHandlerFunc func(PostMessageAllConversationParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMessageAllConversationHandlerFunc) Handle(params PostMessageAllConversationParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostMessageAllConversationHandler interface for that can handle valid post message all conversation params
type PostMessageAllConversationHandler interface {
	Handle(PostMessageAllConversationParams, interface{}) middleware.Responder
}

// NewPostMessageAllConversation creates a new http.Handler for the post message all conversation operation
func NewPostMessageAllConversation(ctx *middleware.Context, handler PostMessageAllConversationHandler) *PostMessageAllConversation {
	return &PostMessageAllConversation{Context: ctx, Handler: handler}
}

/*PostMessageAllConversation swagger:route POST /message/all-conversation Messages postMessageAllConversation

Get recent conversations

*/
type PostMessageAllConversation struct {
	Context *middleware.Context
	Handler PostMessageAllConversationHandler
}

func (o *PostMessageAllConversation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostMessageAllConversationParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
