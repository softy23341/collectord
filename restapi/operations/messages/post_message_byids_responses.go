// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostMessageByidsOKCode is the HTTP code returned for type PostMessageByidsOK
const PostMessageByidsOKCode int = 200

/*PostMessageByidsOK Successful received

swagger:response postMessageByidsOK
*/
type PostMessageByidsOK struct {

	/*
	  In: Body
	*/
	Payload *models.AGetMessages `json:"body,omitempty"`
}

// NewPostMessageByidsOK creates PostMessageByidsOK with default headers values
func NewPostMessageByidsOK() *PostMessageByidsOK {

	return &PostMessageByidsOK{}
}

// WithPayload adds the payload to the post message byids o k response
func (o *PostMessageByidsOK) WithPayload(payload *models.AGetMessages) *PostMessageByidsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message byids o k response
func (o *PostMessageByidsOK) SetPayload(payload *models.AGetMessages) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageByidsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMessageByidsForbiddenCode is the HTTP code returned for type PostMessageByidsForbidden
const PostMessageByidsForbiddenCode int = 403

/*PostMessageByidsForbidden Forbidden

swagger:response postMessageByidsForbidden
*/
type PostMessageByidsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageByidsForbidden creates PostMessageByidsForbidden with default headers values
func NewPostMessageByidsForbidden() *PostMessageByidsForbidden {

	return &PostMessageByidsForbidden{}
}

// WithPayload adds the payload to the post message byids forbidden response
func (o *PostMessageByidsForbidden) WithPayload(payload *models.Error) *PostMessageByidsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message byids forbidden response
func (o *PostMessageByidsForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageByidsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostMessageByidsDefault Unexpected error

swagger:response postMessageByidsDefault
*/
type PostMessageByidsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageByidsDefault creates PostMessageByidsDefault with default headers values
func NewPostMessageByidsDefault(code int) *PostMessageByidsDefault {
	if code <= 0 {
		code = 500
	}

	return &PostMessageByidsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post message byids default response
func (o *PostMessageByidsDefault) WithStatusCode(code int) *PostMessageByidsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post message byids default response
func (o *PostMessageByidsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post message byids default response
func (o *PostMessageByidsDefault) WithPayload(payload *models.Error) *PostMessageByidsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message byids default response
func (o *PostMessageByidsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageByidsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
