// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostMessageOKCode is the HTTP code returned for type PostMessageOK
const PostMessageOKCode int = 200

/*PostMessageOK Successful send

swagger:response postMessageOK
*/
type PostMessageOK struct {

	/*
	  In: Body
	*/
	Payload *models.ASendMessage `json:"body,omitempty"`
}

// NewPostMessageOK creates PostMessageOK with default headers values
func NewPostMessageOK() *PostMessageOK {

	return &PostMessageOK{}
}

// WithPayload adds the payload to the post message o k response
func (o *PostMessageOK) WithPayload(payload *models.ASendMessage) *PostMessageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message o k response
func (o *PostMessageOK) SetPayload(payload *models.ASendMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMessageForbiddenCode is the HTTP code returned for type PostMessageForbidden
const PostMessageForbiddenCode int = 403

/*PostMessageForbidden Forbidden

swagger:response postMessageForbidden
*/
type PostMessageForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageForbidden creates PostMessageForbidden with default headers values
func NewPostMessageForbidden() *PostMessageForbidden {

	return &PostMessageForbidden{}
}

// WithPayload adds the payload to the post message forbidden response
func (o *PostMessageForbidden) WithPayload(payload *models.Error) *PostMessageForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message forbidden response
func (o *PostMessageForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMessageUnprocessableEntityCode is the HTTP code returned for type PostMessageUnprocessableEntity
const PostMessageUnprocessableEntityCode int = 422

/*PostMessageUnprocessableEntity cant send message

swagger:response postMessageUnprocessableEntity
*/
type PostMessageUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageUnprocessableEntity creates PostMessageUnprocessableEntity with default headers values
func NewPostMessageUnprocessableEntity() *PostMessageUnprocessableEntity {

	return &PostMessageUnprocessableEntity{}
}

// WithPayload adds the payload to the post message unprocessable entity response
func (o *PostMessageUnprocessableEntity) WithPayload(payload *models.Error) *PostMessageUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message unprocessable entity response
func (o *PostMessageUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMessageLockedCode is the HTTP code returned for type PostMessageLocked
const PostMessageLockedCode int = 423

/*PostMessageLocked Cant send message to blocked user

swagger:response postMessageLocked
*/
type PostMessageLocked struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageLocked creates PostMessageLocked with default headers values
func NewPostMessageLocked() *PostMessageLocked {

	return &PostMessageLocked{}
}

// WithPayload adds the payload to the post message locked response
func (o *PostMessageLocked) WithPayload(payload *models.Error) *PostMessageLocked {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message locked response
func (o *PostMessageLocked) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageLocked) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(423)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostMessageDefault Unexpected error

swagger:response postMessageDefault
*/
type PostMessageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageDefault creates PostMessageDefault with default headers values
func NewPostMessageDefault(code int) *PostMessageDefault {
	if code <= 0 {
		code = 500
	}

	return &PostMessageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post message default response
func (o *PostMessageDefault) WithStatusCode(code int) *PostMessageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post message default response
func (o *PostMessageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post message default response
func (o *PostMessageDefault) WithPayload(payload *models.Error) *PostMessageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message default response
func (o *PostMessageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
