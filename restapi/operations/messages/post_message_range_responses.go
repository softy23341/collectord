// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostMessageRangeOKCode is the HTTP code returned for type PostMessageRangeOK
const PostMessageRangeOKCode int = 200

/*PostMessageRangeOK Successful received

swagger:response postMessageRangeOK
*/
type PostMessageRangeOK struct {

	/*
	  In: Body
	*/
	Payload *models.AGetMessagesRange `json:"body,omitempty"`
}

// NewPostMessageRangeOK creates PostMessageRangeOK with default headers values
func NewPostMessageRangeOK() *PostMessageRangeOK {

	return &PostMessageRangeOK{}
}

// WithPayload adds the payload to the post message range o k response
func (o *PostMessageRangeOK) WithPayload(payload *models.AGetMessagesRange) *PostMessageRangeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message range o k response
func (o *PostMessageRangeOK) SetPayload(payload *models.AGetMessagesRange) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageRangeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMessageRangeForbiddenCode is the HTTP code returned for type PostMessageRangeForbidden
const PostMessageRangeForbiddenCode int = 403

/*PostMessageRangeForbidden Forbidden

swagger:response postMessageRangeForbidden
*/
type PostMessageRangeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageRangeForbidden creates PostMessageRangeForbidden with default headers values
func NewPostMessageRangeForbidden() *PostMessageRangeForbidden {

	return &PostMessageRangeForbidden{}
}

// WithPayload adds the payload to the post message range forbidden response
func (o *PostMessageRangeForbidden) WithPayload(payload *models.Error) *PostMessageRangeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message range forbidden response
func (o *PostMessageRangeForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageRangeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostMessageRangeDefault Unexpected error

swagger:response postMessageRangeDefault
*/
type PostMessageRangeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostMessageRangeDefault creates PostMessageRangeDefault with default headers values
func NewPostMessageRangeDefault(code int) *PostMessageRangeDefault {
	if code <= 0 {
		code = 500
	}

	return &PostMessageRangeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post message range default response
func (o *PostMessageRangeDefault) WithStatusCode(code int) *PostMessageRangeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post message range default response
func (o *PostMessageRangeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post message range default response
func (o *PostMessageRangeDefault) WithPayload(payload *models.Error) *PostMessageRangeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post message range default response
func (o *PostMessageRangeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMessageRangeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
