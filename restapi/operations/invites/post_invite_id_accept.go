// Code generated by go-swagger; DO NOT EDIT.

package invites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostInviteIDAcceptHandlerFunc turns a function with the right signature into a post invite ID accept handler
type PostInviteIDAcceptHandlerFunc func(PostInviteIDAcceptParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInviteIDAcceptHandlerFunc) Handle(params PostInviteIDAcceptParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostInviteIDAcceptHandler interface for that can handle valid post invite ID accept params
type PostInviteIDAcceptHandler interface {
	Handle(PostInviteIDAcceptParams, interface{}) middleware.Responder
}

// NewPostInviteIDAccept creates a new http.Handler for the post invite ID accept operation
func NewPostInviteIDAccept(ctx *middleware.Context, handler PostInviteIDAcceptHandler) *PostInviteIDAccept {
	return &PostInviteIDAccept{Context: ctx, Handler: handler}
}

/*PostInviteIDAccept swagger:route POST /invite/{ID}/accept Invites postInviteIdAccept

PostInviteIDAccept post invite ID accept API

*/
type PostInviteIDAccept struct {
	Context *middleware.Context
	Handler PostInviteIDAcceptHandler
}

func (o *PostInviteIDAccept) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostInviteIDAcceptParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
