// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetGroupsIDHandlerFunc turns a function with the right signature into a get groups ID handler
type GetGroupsIDHandlerFunc func(GetGroupsIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGroupsIDHandlerFunc) Handle(params GetGroupsIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetGroupsIDHandler interface for that can handle valid get groups ID params
type GetGroupsIDHandler interface {
	Handle(GetGroupsIDParams, interface{}) middleware.Responder
}

// NewGetGroupsID creates a new http.Handler for the get groups ID operation
func NewGetGroupsID(ctx *middleware.Context, handler GetGroupsIDHandler) *GetGroupsID {
	return &GetGroupsID{Context: ctx, Handler: handler}
}

/*GetGroupsID swagger:route GET /groups/{ID} Groups getGroupsId

Group collections list

*/
type GetGroupsID struct {
	Context *middleware.Context
	Handler GetGroupsIDHandler
}

func (o *GetGroupsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetGroupsIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
