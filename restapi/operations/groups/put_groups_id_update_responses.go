// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PutGroupsIDUpdateNoContentCode is the HTTP code returned for type PutGroupsIDUpdateNoContent
const PutGroupsIDUpdateNoContentCode int = 204

/*PutGroupsIDUpdateNoContent success

swagger:response putGroupsIdUpdateNoContent
*/
type PutGroupsIDUpdateNoContent struct {
}

// NewPutGroupsIDUpdateNoContent creates PutGroupsIDUpdateNoContent with default headers values
func NewPutGroupsIDUpdateNoContent() *PutGroupsIDUpdateNoContent {

	return &PutGroupsIDUpdateNoContent{}
}

// WriteResponse to the client
func (o *PutGroupsIDUpdateNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PutGroupsIDUpdateForbiddenCode is the HTTP code returned for type PutGroupsIDUpdateForbidden
const PutGroupsIDUpdateForbiddenCode int = 403

/*PutGroupsIDUpdateForbidden Forbidden

swagger:response putGroupsIdUpdateForbidden
*/
type PutGroupsIDUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutGroupsIDUpdateForbidden creates PutGroupsIDUpdateForbidden with default headers values
func NewPutGroupsIDUpdateForbidden() *PutGroupsIDUpdateForbidden {

	return &PutGroupsIDUpdateForbidden{}
}

// WithPayload adds the payload to the put groups Id update forbidden response
func (o *PutGroupsIDUpdateForbidden) WithPayload(payload *models.Error) *PutGroupsIDUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put groups Id update forbidden response
func (o *PutGroupsIDUpdateForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutGroupsIDUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutGroupsIDUpdateNotFoundCode is the HTTP code returned for type PutGroupsIDUpdateNotFound
const PutGroupsIDUpdateNotFoundCode int = 404

/*PutGroupsIDUpdateNotFound cant find group

swagger:response putGroupsIdUpdateNotFound
*/
type PutGroupsIDUpdateNotFound struct {
}

// NewPutGroupsIDUpdateNotFound creates PutGroupsIDUpdateNotFound with default headers values
func NewPutGroupsIDUpdateNotFound() *PutGroupsIDUpdateNotFound {

	return &PutGroupsIDUpdateNotFound{}
}

// WriteResponse to the client
func (o *PutGroupsIDUpdateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*PutGroupsIDUpdateDefault Unexpected error

swagger:response putGroupsIdUpdateDefault
*/
type PutGroupsIDUpdateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutGroupsIDUpdateDefault creates PutGroupsIDUpdateDefault with default headers values
func NewPutGroupsIDUpdateDefault(code int) *PutGroupsIDUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &PutGroupsIDUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put groups ID update default response
func (o *PutGroupsIDUpdateDefault) WithStatusCode(code int) *PutGroupsIDUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put groups ID update default response
func (o *PutGroupsIDUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put groups ID update default response
func (o *PutGroupsIDUpdateDefault) WithPayload(payload *models.Error) *PutGroupsIDUpdateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put groups ID update default response
func (o *PutGroupsIDUpdateDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutGroupsIDUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
