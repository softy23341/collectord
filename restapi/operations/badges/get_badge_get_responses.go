// Code generated by go-swagger; DO NOT EDIT.

package badges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// GetBadgeGetOKCode is the HTTP code returned for type GetBadgeGetOK
const GetBadgeGetOKCode int = 200

/*GetBadgeGetOK badge list for selected root

swagger:response getBadgeGetOK
*/
type GetBadgeGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.ABadges `json:"body,omitempty"`
}

// NewGetBadgeGetOK creates GetBadgeGetOK with default headers values
func NewGetBadgeGetOK() *GetBadgeGetOK {

	return &GetBadgeGetOK{}
}

// WithPayload adds the payload to the get badge get o k response
func (o *GetBadgeGetOK) WithPayload(payload *models.ABadges) *GetBadgeGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get badge get o k response
func (o *GetBadgeGetOK) SetPayload(payload *models.ABadges) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBadgeGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBadgeGetForbiddenCode is the HTTP code returned for type GetBadgeGetForbidden
const GetBadgeGetForbiddenCode int = 403

/*GetBadgeGetForbidden Forbidden

swagger:response getBadgeGetForbidden
*/
type GetBadgeGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBadgeGetForbidden creates GetBadgeGetForbidden with default headers values
func NewGetBadgeGetForbidden() *GetBadgeGetForbidden {

	return &GetBadgeGetForbidden{}
}

// WithPayload adds the payload to the get badge get forbidden response
func (o *GetBadgeGetForbidden) WithPayload(payload *models.Error) *GetBadgeGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get badge get forbidden response
func (o *GetBadgeGetForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBadgeGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetBadgeGetDefault Unexpected error

swagger:response getBadgeGetDefault
*/
type GetBadgeGetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBadgeGetDefault creates GetBadgeGetDefault with default headers values
func NewGetBadgeGetDefault(code int) *GetBadgeGetDefault {
	if code <= 0 {
		code = 500
	}

	return &GetBadgeGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get badge get default response
func (o *GetBadgeGetDefault) WithStatusCode(code int) *GetBadgeGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get badge get default response
func (o *GetBadgeGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get badge get default response
func (o *GetBadgeGetDefault) WithPayload(payload *models.Error) *GetBadgeGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get badge get default response
func (o *GetBadgeGetDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBadgeGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
