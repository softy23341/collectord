// Code generated by go-swagger; DO NOT EDIT.

package badges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostBadgeNewOKCode is the HTTP code returned for type PostBadgeNewOK
const PostBadgeNewOKCode int = 200

/*PostBadgeNewOK Success

swagger:response postBadgeNewOK
*/
type PostBadgeNewOK struct {

	/*
	  In: Body
	*/
	Payload *models.ACreateBadge `json:"body,omitempty"`
}

// NewPostBadgeNewOK creates PostBadgeNewOK with default headers values
func NewPostBadgeNewOK() *PostBadgeNewOK {

	return &PostBadgeNewOK{}
}

// WithPayload adds the payload to the post badge new o k response
func (o *PostBadgeNewOK) WithPayload(payload *models.ACreateBadge) *PostBadgeNewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post badge new o k response
func (o *PostBadgeNewOK) SetPayload(payload *models.ACreateBadge) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBadgeNewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostBadgeNewForbiddenCode is the HTTP code returned for type PostBadgeNewForbidden
const PostBadgeNewForbiddenCode int = 403

/*PostBadgeNewForbidden Forbidden

swagger:response postBadgeNewForbidden
*/
type PostBadgeNewForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostBadgeNewForbidden creates PostBadgeNewForbidden with default headers values
func NewPostBadgeNewForbidden() *PostBadgeNewForbidden {

	return &PostBadgeNewForbidden{}
}

// WithPayload adds the payload to the post badge new forbidden response
func (o *PostBadgeNewForbidden) WithPayload(payload *models.Error) *PostBadgeNewForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post badge new forbidden response
func (o *PostBadgeNewForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBadgeNewForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostBadgeNewConflictCode is the HTTP code returned for type PostBadgeNewConflict
const PostBadgeNewConflictCode int = 409

/*PostBadgeNewConflict Badge already present (color and name must be uniq)

swagger:response postBadgeNewConflict
*/
type PostBadgeNewConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostBadgeNewConflict creates PostBadgeNewConflict with default headers values
func NewPostBadgeNewConflict() *PostBadgeNewConflict {

	return &PostBadgeNewConflict{}
}

// WithPayload adds the payload to the post badge new conflict response
func (o *PostBadgeNewConflict) WithPayload(payload *models.Error) *PostBadgeNewConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post badge new conflict response
func (o *PostBadgeNewConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBadgeNewConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostBadgeNewDefault Unexpected error

swagger:response postBadgeNewDefault
*/
type PostBadgeNewDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostBadgeNewDefault creates PostBadgeNewDefault with default headers values
func NewPostBadgeNewDefault(code int) *PostBadgeNewDefault {
	if code <= 0 {
		code = 500
	}

	return &PostBadgeNewDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post badge new default response
func (o *PostBadgeNewDefault) WithStatusCode(code int) *PostBadgeNewDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post badge new default response
func (o *PostBadgeNewDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post badge new default response
func (o *PostBadgeNewDefault) WithPayload(payload *models.Error) *PostBadgeNewDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post badge new default response
func (o *PostBadgeNewDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBadgeNewDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
