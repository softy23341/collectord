// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"git.softndit.com/collector/backend/restapi/operations/actors"
	"git.softndit.com/collector/backend/restapi/operations/auth"
	"git.softndit.com/collector/backend/restapi/operations/badges"
	"git.softndit.com/collector/backend/restapi/operations/chat"
	"git.softndit.com/collector/backend/restapi/operations/collections"
	"git.softndit.com/collector/backend/restapi/operations/dashboard"
	"git.softndit.com/collector/backend/restapi/operations/events"
	"git.softndit.com/collector/backend/restapi/operations/groups"
	"git.softndit.com/collector/backend/restapi/operations/invites"
	"git.softndit.com/collector/backend/restapi/operations/materials"
	"git.softndit.com/collector/backend/restapi/operations/medias"
	"git.softndit.com/collector/backend/restapi/operations/messages"
	"git.softndit.com/collector/backend/restapi/operations/nameddateintervals"
	"git.softndit.com/collector/backend/restapi/operations/objects"
	"git.softndit.com/collector/backend/restapi/operations/objectstatus"
	"git.softndit.com/collector/backend/restapi/operations/originlocations"
	"git.softndit.com/collector/backend/restapi/operations/public_collections"
	"git.softndit.com/collector/backend/restapi/operations/public_objects"
	"git.softndit.com/collector/backend/restapi/operations/references"
	"git.softndit.com/collector/backend/restapi/operations/rights"
	"git.softndit.com/collector/backend/restapi/operations/roots"
	"git.softndit.com/collector/backend/restapi/operations/session"
	"git.softndit.com/collector/backend/restapi/operations/tasks"
	"git.softndit.com/collector/backend/restapi/operations/teams"
	"git.softndit.com/collector/backend/restapi/operations/users"
	"git.softndit.com/collector/backend/restapi/operations/users_ban_list"
)

// NewCollectordAPI creates a new Collectord instance
func NewCollectordAPI(spec *loads.Document) *CollectordAPI {
	return &CollectordAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		ActorsDeleteActorIDDeleteHandler: actors.DeleteActorIDDeleteHandlerFunc(func(params actors.DeleteActorIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ActorsDeleteActorIDDelete has not yet been implemented")
		}),
		BadgesDeleteBadgeIDDeleteHandler: badges.DeleteBadgeIDDeleteHandlerFunc(func(params badges.DeleteBadgeIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BadgesDeleteBadgeIDDelete has not yet been implemented")
		}),
		CollectionsDeleteCollectionsIDDeleteHandler: collections.DeleteCollectionsIDDeleteHandlerFunc(func(params collections.DeleteCollectionsIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsDeleteCollectionsIDDelete has not yet been implemented")
		}),
		GroupsDeleteGroupsIDDeleteHandler: groups.DeleteGroupsIDDeleteHandlerFunc(func(params groups.DeleteGroupsIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteGroupsIDDelete has not yet been implemented")
		}),
		MaterialsDeleteMaterialIDDeleteHandler: materials.DeleteMaterialIDDeleteHandlerFunc(func(params materials.DeleteMaterialIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MaterialsDeleteMaterialIDDelete has not yet been implemented")
		}),
		NameddateintervalsDeleteNamedDateIntervalIDDeleteHandler: nameddateintervals.DeleteNamedDateIntervalIDDeleteHandlerFunc(func(params nameddateintervals.DeleteNamedDateIntervalIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NameddateintervalsDeleteNamedDateIntervalIDDelete has not yet been implemented")
		}),
		ObjectsDeleteObjectsIDDeleteHandler: objects.DeleteObjectsIDDeleteHandlerFunc(func(params objects.DeleteObjectsIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectsDeleteObjectsIDDelete has not yet been implemented")
		}),
		OriginlocationsDeleteOriginLocationIDDeleteHandler: originlocations.DeleteOriginLocationIDDeleteHandlerFunc(func(params originlocations.DeleteOriginLocationIDDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OriginlocationsDeleteOriginLocationIDDelete has not yet been implemented")
		}),
		TasksDeleteTaskIDHandler: tasks.DeleteTaskIDHandlerFunc(func(params tasks.DeleteTaskIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksDeleteTaskID has not yet been implemented")
		}),
		ActorsGetActorGetHandler: actors.GetActorGetHandlerFunc(func(params actors.GetActorGetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ActorsGetActorGet has not yet been implemented")
		}),
		AuthGetAuthRegConfirmEmailHandler: auth.GetAuthRegConfirmEmailHandlerFunc(func(params auth.GetAuthRegConfirmEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthGetAuthRegConfirmEmail has not yet been implemented")
		}),
		BadgesGetBadgeGetHandler: badges.GetBadgeGetHandlerFunc(func(params badges.GetBadgeGetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BadgesGetBadgeGet has not yet been implemented")
		}),
		ChatGetChatIDHandler: chat.GetChatIDHandlerFunc(func(params chat.GetChatIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ChatGetChatID has not yet been implemented")
		}),
		CollectionsGetCollectionsDraftHandler: collections.GetCollectionsDraftHandlerFunc(func(params collections.GetCollectionsDraftParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsGetCollectionsDraft has not yet been implemented")
		}),
		CollectionsGetCollectionsIDHandler: collections.GetCollectionsIDHandlerFunc(func(params collections.GetCollectionsIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsGetCollectionsID has not yet been implemented")
		}),
		DashboardGetDashboardHandler: dashboard.GetDashboardHandlerFunc(func(params dashboard.GetDashboardParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DashboardGetDashboard has not yet been implemented")
		}),
		GroupsGetGroupsIDHandler: groups.GetGroupsIDHandlerFunc(func(params groups.GetGroupsIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetGroupsID has not yet been implemented")
		}),
		MaterialsGetMaterialGetHandler: materials.GetMaterialGetHandlerFunc(func(params materials.GetMaterialGetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MaterialsGetMaterialGet has not yet been implemented")
		}),
		MediasGetMediasHandler: medias.GetMediasHandlerFunc(func(params medias.GetMediasParams) middleware.Responder {
			return middleware.NotImplemented("operation MediasGetMedias has not yet been implemented")
		}),
		MediasGetMediasByIdsHandler: medias.GetMediasByIdsHandlerFunc(func(params medias.GetMediasByIdsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MediasGetMediasByIds has not yet been implemented")
		}),
		NameddateintervalsGetNamedDateIntervalGetHandler: nameddateintervals.GetNamedDateIntervalGetHandlerFunc(func(params nameddateintervals.GetNamedDateIntervalGetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NameddateintervalsGetNamedDateIntervalGet has not yet been implemented")
		}),
		ObjectsGetObjectsIDHandler: objects.GetObjectsIDHandlerFunc(func(params objects.GetObjectsIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectsGetObjectsID has not yet been implemented")
		}),
		OriginlocationsGetOriginLocationGetHandler: originlocations.GetOriginLocationGetHandlerFunc(func(params originlocations.GetOriginLocationGetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OriginlocationsGetOriginLocationGet has not yet been implemented")
		}),
		PublicCollectionsGetPublicCollectionsIDHandler: public_collections.GetPublicCollectionsIDHandlerFunc(func(params public_collections.GetPublicCollectionsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PublicCollectionsGetPublicCollectionsID has not yet been implemented")
		}),
		PublicObjectsGetPublicObjectsIDHandler: public_objects.GetPublicObjectsIDHandlerFunc(func(params public_objects.GetPublicObjectsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PublicObjectsGetPublicObjectsID has not yet been implemented")
		}),
		ReferencesGetReferencesHandler: references.GetReferencesHandlerFunc(func(params references.GetReferencesParams) middleware.Responder {
			return middleware.NotImplemented("operation ReferencesGetReferences has not yet been implemented")
		}),
		RightsGetRightHandler: rights.GetRightHandlerFunc(func(params rights.GetRightParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RightsGetRight has not yet been implemented")
		}),
		RootsGetRootByUserHandler: roots.GetRootByUserHandlerFunc(func(params roots.GetRootByUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RootsGetRootByUser has not yet been implemented")
		}),
		RootsGetRootIDHandler: roots.GetRootIDHandlerFunc(func(params roots.GetRootIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RootsGetRootID has not yet been implemented")
		}),
		TasksGetTaskIDHandler: tasks.GetTaskIDHandlerFunc(func(params tasks.GetTaskIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksGetTaskID has not yet been implemented")
		}),
		TasksGetTaskMyListHandler: tasks.GetTaskMyListHandlerFunc(func(params tasks.GetTaskMyListParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksGetTaskMyList has not yet been implemented")
		}),
		TeamsGetTeamByRootIDHandler: teams.GetTeamByRootIDHandlerFunc(func(params teams.GetTeamByRootIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TeamsGetTeamByRootID has not yet been implemented")
		}),
		UsersGetUserAboutHandler: users.GetUserAboutHandlerFunc(func(params users.GetUserAboutParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUserAbout has not yet been implemented")
		}),
		UsersBanListGetUsersBanListHandler: users_ban_list.GetUsersBanListHandlerFunc(func(params users_ban_list.GetUsersBanListParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UsersBanListGetUsersBanList has not yet been implemented")
		}),
		ActorsPostActorIDUpdateHandler: actors.PostActorIDUpdateHandlerFunc(func(params actors.PostActorIDUpdateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ActorsPostActorIDUpdate has not yet been implemented")
		}),
		ActorsPostActorNewHandler: actors.PostActorNewHandlerFunc(func(params actors.PostActorNewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ActorsPostActorNew has not yet been implemented")
		}),
		AuthPostAuthLoginHandler: auth.PostAuthLoginHandlerFunc(func(params auth.PostAuthLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostAuthLogin has not yet been implemented")
		}),
		AuthPostAuthLogoutHandler: auth.PostAuthLogoutHandlerFunc(func(params auth.PostAuthLogoutParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostAuthLogout has not yet been implemented")
		}),
		AuthPostAuthPasswordRecoveryHandler: auth.PostAuthPasswordRecoveryHandlerFunc(func(params auth.PostAuthPasswordRecoveryParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostAuthPasswordRecovery has not yet been implemented")
		}),
		AuthPostAuthPasswordResetTokenHandler: auth.PostAuthPasswordResetTokenHandlerFunc(func(params auth.PostAuthPasswordResetTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostAuthPasswordResetToken has not yet been implemented")
		}),
		AuthPostAuthRegHandler: auth.PostAuthRegHandlerFunc(func(params auth.PostAuthRegParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostAuthReg has not yet been implemented")
		}),
		AuthPostAuthRegConfirmEmailHandler: auth.PostAuthRegConfirmEmailHandlerFunc(func(params auth.PostAuthRegConfirmEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostAuthRegConfirmEmail has not yet been implemented")
		}),
		BadgesPostBadgeIDUpdateHandler: badges.PostBadgeIDUpdateHandlerFunc(func(params badges.PostBadgeIDUpdateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BadgesPostBadgeIDUpdate has not yet been implemented")
		}),
		BadgesPostBadgeNewHandler: badges.PostBadgeNewHandlerFunc(func(params badges.PostBadgeNewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BadgesPostBadgeNew has not yet been implemented")
		}),
		ChatPostChatHandler: chat.PostChatHandlerFunc(func(params chat.PostChatParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ChatPostChat has not yet been implemented")
		}),
		ChatPostChatAddUserHandler: chat.PostChatAddUserHandlerFunc(func(params chat.PostChatAddUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ChatPostChatAddUser has not yet been implemented")
		}),
		ChatPostChatIDChangeAvatarHandler: chat.PostChatIDChangeAvatarHandlerFunc(func(params chat.PostChatIDChangeAvatarParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ChatPostChatIDChangeAvatar has not yet been implemented")
		}),
		ChatPostChatIDChangeNameHandler: chat.PostChatIDChangeNameHandlerFunc(func(params chat.PostChatIDChangeNameParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ChatPostChatIDChangeName has not yet been implemented")
		}),
		ChatPostChatRemoveUserHandler: chat.PostChatRemoveUserHandlerFunc(func(params chat.PostChatRemoveUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ChatPostChatRemoveUser has not yet been implemented")
		}),
		CollectionsPostCollectionsHandler: collections.PostCollectionsHandlerFunc(func(params collections.PostCollectionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsPostCollections has not yet been implemented")
		}),
		CollectionsPostCollectionsAddToGroupHandler: collections.PostCollectionsAddToGroupHandlerFunc(func(params collections.PostCollectionsAddToGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsPostCollectionsAddToGroup has not yet been implemented")
		}),
		CollectionsPostCollectionsObjectsHandler: collections.PostCollectionsObjectsHandlerFunc(func(params collections.PostCollectionsObjectsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsPostCollectionsObjects has not yet been implemented")
		}),
		CollectionsPostCollectionsRemoveFromGroupHandler: collections.PostCollectionsRemoveFromGroupHandlerFunc(func(params collections.PostCollectionsRemoveFromGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsPostCollectionsRemoveFromGroup has not yet been implemented")
		}),
		EventsPostEventHandler: events.PostEventHandlerFunc(func(params events.PostEventParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation EventsPostEvent has not yet been implemented")
		}),
		EventsPostEventConfirmHandler: events.PostEventConfirmHandlerFunc(func(params events.PostEventConfirmParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation EventsPostEventConfirm has not yet been implemented")
		}),
		GroupsPostGroupsHandler: groups.PostGroupsHandlerFunc(func(params groups.PostGroupsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GroupsPostGroups has not yet been implemented")
		}),
		InvitesPostInviteByEmailHandler: invites.PostInviteByEmailHandlerFunc(func(params invites.PostInviteByEmailParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InvitesPostInviteByEmail has not yet been implemented")
		}),
		InvitesPostInviteIDAcceptHandler: invites.PostInviteIDAcceptHandlerFunc(func(params invites.PostInviteIDAcceptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InvitesPostInviteIDAccept has not yet been implemented")
		}),
		InvitesPostInviteIDCancelHandler: invites.PostInviteIDCancelHandlerFunc(func(params invites.PostInviteIDCancelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InvitesPostInviteIDCancel has not yet been implemented")
		}),
		InvitesPostInviteIDRejectHandler: invites.PostInviteIDRejectHandlerFunc(func(params invites.PostInviteIDRejectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InvitesPostInviteIDReject has not yet been implemented")
		}),
		InvitesPostInviteNewHandler: invites.PostInviteNewHandlerFunc(func(params invites.PostInviteNewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InvitesPostInviteNew has not yet been implemented")
		}),
		MaterialsPostMaterialIDUpdateHandler: materials.PostMaterialIDUpdateHandlerFunc(func(params materials.PostMaterialIDUpdateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MaterialsPostMaterialIDUpdate has not yet been implemented")
		}),
		MaterialsPostMaterialNewHandler: materials.PostMaterialNewHandlerFunc(func(params materials.PostMaterialNewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MaterialsPostMaterialNew has not yet been implemented")
		}),
		MediasPostMediasHandler: medias.PostMediasHandlerFunc(func(params medias.PostMediasParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MediasPostMedias has not yet been implemented")
		}),
		MessagesPostMessageHandler: messages.PostMessageHandlerFunc(func(params messages.PostMessageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MessagesPostMessage has not yet been implemented")
		}),
		MessagesPostMessageAllConversationHandler: messages.PostMessageAllConversationHandlerFunc(func(params messages.PostMessageAllConversationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MessagesPostMessageAllConversation has not yet been implemented")
		}),
		MessagesPostMessageByidsHandler: messages.PostMessageByidsHandlerFunc(func(params messages.PostMessageByidsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MessagesPostMessageByids has not yet been implemented")
		}),
		MessagesPostMessageRangeHandler: messages.PostMessageRangeHandlerFunc(func(params messages.PostMessageRangeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MessagesPostMessageRange has not yet been implemented")
		}),
		MessagesPostMessageReadHistoryHandler: messages.PostMessageReadHistoryHandlerFunc(func(params messages.PostMessageReadHistoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MessagesPostMessageReadHistory has not yet been implemented")
		}),
		NameddateintervalsPostNamedDateIntervalIDUpdateHandler: nameddateintervals.PostNamedDateIntervalIDUpdateHandlerFunc(func(params nameddateintervals.PostNamedDateIntervalIDUpdateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NameddateintervalsPostNamedDateIntervalIDUpdate has not yet been implemented")
		}),
		NameddateintervalsPostNamedDateIntervalNewHandler: nameddateintervals.PostNamedDateIntervalNewHandlerFunc(func(params nameddateintervals.PostNamedDateIntervalNewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NameddateintervalsPostNamedDateIntervalNew has not yet been implemented")
		}),
		ObjectstatusPostObjectStatusNewHandler: objectstatus.PostObjectStatusNewHandlerFunc(func(params objectstatus.PostObjectStatusNewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectstatusPostObjectStatusNew has not yet been implemented")
		}),
		ObjectsPostObjectsHandler: objects.PostObjectsHandlerFunc(func(params objects.PostObjectsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectsPostObjects has not yet been implemented")
		}),
		ObjectsPostObjectsDeleteHandler: objects.PostObjectsDeleteHandlerFunc(func(params objects.PostObjectsDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectsPostObjectsDelete has not yet been implemented")
		}),
		ObjectsPostObjectsMoveHandler: objects.PostObjectsMoveHandlerFunc(func(params objects.PostObjectsMoveParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectsPostObjectsMove has not yet been implemented")
		}),
		ObjectsPostObjectsSearchHandler: objects.PostObjectsSearchHandlerFunc(func(params objects.PostObjectsSearchParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectsPostObjectsSearch has not yet been implemented")
		}),
		OriginlocationsPostOriginLocationIDUpdateHandler: originlocations.PostOriginLocationIDUpdateHandlerFunc(func(params originlocations.PostOriginLocationIDUpdateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OriginlocationsPostOriginLocationIDUpdate has not yet been implemented")
		}),
		OriginlocationsPostOriginLocationNewHandler: originlocations.PostOriginLocationNewHandlerFunc(func(params originlocations.PostOriginLocationNewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OriginlocationsPostOriginLocationNew has not yet been implemented")
		}),
		PublicCollectionsPostPublicCollectionsHandler: public_collections.PostPublicCollectionsHandlerFunc(func(params public_collections.PostPublicCollectionsParams) middleware.Responder {
			return middleware.NotImplemented("operation PublicCollectionsPostPublicCollections has not yet been implemented")
		}),
		PublicCollectionsPostPublicCollectionsObjectsHandler: public_collections.PostPublicCollectionsObjectsHandlerFunc(func(params public_collections.PostPublicCollectionsObjectsParams) middleware.Responder {
			return middleware.NotImplemented("operation PublicCollectionsPostPublicCollectionsObjects has not yet been implemented")
		}),
		RootsPostRootAddUserHandler: roots.PostRootAddUserHandlerFunc(func(params roots.PostRootAddUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RootsPostRootAddUser has not yet been implemented")
		}),
		RootsPostRootRemoveUserHandler: roots.PostRootRemoveUserHandlerFunc(func(params roots.PostRootRemoveUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RootsPostRootRemoveUser has not yet been implemented")
		}),
		SessionPostSessionRegisterDeviceTokenHandler: session.PostSessionRegisterDeviceTokenHandlerFunc(func(params session.PostSessionRegisterDeviceTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SessionPostSessionRegisterDeviceToken has not yet been implemented")
		}),
		TasksPostTaskHandler: tasks.PostTaskHandlerFunc(func(params tasks.PostTaskParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksPostTask has not yet been implemented")
		}),
		TasksPostTaskIDArchiveHandler: tasks.PostTaskIDArchiveHandlerFunc(func(params tasks.PostTaskIDArchiveParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksPostTaskIDArchive has not yet been implemented")
		}),
		TasksPostTaskIDAssignToHandler: tasks.PostTaskIDAssignToHandlerFunc(func(params tasks.PostTaskIDAssignToParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksPostTaskIDAssignTo has not yet been implemented")
		}),
		TasksPostTaskIDChangeStatusHandler: tasks.PostTaskIDChangeStatusHandlerFunc(func(params tasks.PostTaskIDChangeStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksPostTaskIDChangeStatus has not yet been implemented")
		}),
		TasksPostTaskMyArchiveListHandler: tasks.PostTaskMyArchiveListHandlerFunc(func(params tasks.PostTaskMyArchiveListParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksPostTaskMyArchiveList has not yet been implemented")
		}),
		UsersPostUserSearchByNameHandler: users.PostUserSearchByNameHandlerFunc(func(params users.PostUserSearchByNameParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UsersPostUserSearchByName has not yet been implemented")
		}),
		UsersBanListPostUsersBanListAddHandler: users_ban_list.PostUsersBanListAddHandlerFunc(func(params users_ban_list.PostUsersBanListAddParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UsersBanListPostUsersBanListAdd has not yet been implemented")
		}),
		UsersBanListPostUsersBanListRemoveHandler: users_ban_list.PostUsersBanListRemoveHandlerFunc(func(params users_ban_list.PostUsersBanListRemoveParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UsersBanListPostUsersBanListRemove has not yet been implemented")
		}),
		CollectionsPutCollectionsIDHandler: collections.PutCollectionsIDHandlerFunc(func(params collections.PutCollectionsIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CollectionsPutCollectionsID has not yet been implemented")
		}),
		GroupsPutGroupsIDUpdateHandler: groups.PutGroupsIDUpdateHandlerFunc(func(params groups.PutGroupsIDUpdateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GroupsPutGroupsIDUpdate has not yet been implemented")
		}),
		ObjectsPutObjectsIDHandler: objects.PutObjectsIDHandlerFunc(func(params objects.PutObjectsIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ObjectsPutObjectsID has not yet been implemented")
		}),
		RightsPutRightHandler: rights.PutRightHandlerFunc(func(params rights.PutRightParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RightsPutRight has not yet been implemented")
		}),
		TasksPutTaskIDHandler: tasks.PutTaskIDHandlerFunc(func(params tasks.PutTaskIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TasksPutTaskID has not yet been implemented")
		}),
		UsersPutUserHandler: users.PutUserHandlerFunc(func(params users.PutUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UsersPutUser has not yet been implemented")
		}),
		UsersPutUserUpdateLocaleHandler: users.PutUserUpdateLocaleHandlerFunc(func(params users.PutUserUpdateLocaleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UsersPutUserUpdateLocale has not yet been implemented")
		}),

		// Applies when the "Auth-token" header is set
		APIKeyAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (apiKey) Auth-token from header param [Auth-token] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*CollectordAPI Collector backend API */
type CollectordAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// APIKeyAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Auth-token provided in the header
	APIKeyAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ActorsDeleteActorIDDeleteHandler sets the operation handler for the delete actor ID delete operation
	ActorsDeleteActorIDDeleteHandler actors.DeleteActorIDDeleteHandler
	// BadgesDeleteBadgeIDDeleteHandler sets the operation handler for the delete badge ID delete operation
	BadgesDeleteBadgeIDDeleteHandler badges.DeleteBadgeIDDeleteHandler
	// CollectionsDeleteCollectionsIDDeleteHandler sets the operation handler for the delete collections ID delete operation
	CollectionsDeleteCollectionsIDDeleteHandler collections.DeleteCollectionsIDDeleteHandler
	// GroupsDeleteGroupsIDDeleteHandler sets the operation handler for the delete groups ID delete operation
	GroupsDeleteGroupsIDDeleteHandler groups.DeleteGroupsIDDeleteHandler
	// MaterialsDeleteMaterialIDDeleteHandler sets the operation handler for the delete material ID delete operation
	MaterialsDeleteMaterialIDDeleteHandler materials.DeleteMaterialIDDeleteHandler
	// NameddateintervalsDeleteNamedDateIntervalIDDeleteHandler sets the operation handler for the delete named date interval ID delete operation
	NameddateintervalsDeleteNamedDateIntervalIDDeleteHandler nameddateintervals.DeleteNamedDateIntervalIDDeleteHandler
	// ObjectsDeleteObjectsIDDeleteHandler sets the operation handler for the delete objects ID delete operation
	ObjectsDeleteObjectsIDDeleteHandler objects.DeleteObjectsIDDeleteHandler
	// OriginlocationsDeleteOriginLocationIDDeleteHandler sets the operation handler for the delete origin location ID delete operation
	OriginlocationsDeleteOriginLocationIDDeleteHandler originlocations.DeleteOriginLocationIDDeleteHandler
	// TasksDeleteTaskIDHandler sets the operation handler for the delete task ID operation
	TasksDeleteTaskIDHandler tasks.DeleteTaskIDHandler
	// ActorsGetActorGetHandler sets the operation handler for the get actor get operation
	ActorsGetActorGetHandler actors.GetActorGetHandler
	// AuthGetAuthRegConfirmEmailHandler sets the operation handler for the get auth reg confirm email operation
	AuthGetAuthRegConfirmEmailHandler auth.GetAuthRegConfirmEmailHandler
	// BadgesGetBadgeGetHandler sets the operation handler for the get badge get operation
	BadgesGetBadgeGetHandler badges.GetBadgeGetHandler
	// ChatGetChatIDHandler sets the operation handler for the get chat ID operation
	ChatGetChatIDHandler chat.GetChatIDHandler
	// CollectionsGetCollectionsDraftHandler sets the operation handler for the get collections draft operation
	CollectionsGetCollectionsDraftHandler collections.GetCollectionsDraftHandler
	// CollectionsGetCollectionsIDHandler sets the operation handler for the get collections ID operation
	CollectionsGetCollectionsIDHandler collections.GetCollectionsIDHandler
	// DashboardGetDashboardHandler sets the operation handler for the get dashboard operation
	DashboardGetDashboardHandler dashboard.GetDashboardHandler
	// GroupsGetGroupsIDHandler sets the operation handler for the get groups ID operation
	GroupsGetGroupsIDHandler groups.GetGroupsIDHandler
	// MaterialsGetMaterialGetHandler sets the operation handler for the get material get operation
	MaterialsGetMaterialGetHandler materials.GetMaterialGetHandler
	// MediasGetMediasHandler sets the operation handler for the get medias operation
	MediasGetMediasHandler medias.GetMediasHandler
	// MediasGetMediasByIdsHandler sets the operation handler for the get medias by ids operation
	MediasGetMediasByIdsHandler medias.GetMediasByIdsHandler
	// NameddateintervalsGetNamedDateIntervalGetHandler sets the operation handler for the get named date interval get operation
	NameddateintervalsGetNamedDateIntervalGetHandler nameddateintervals.GetNamedDateIntervalGetHandler
	// ObjectsGetObjectsIDHandler sets the operation handler for the get objects ID operation
	ObjectsGetObjectsIDHandler objects.GetObjectsIDHandler
	// OriginlocationsGetOriginLocationGetHandler sets the operation handler for the get origin location get operation
	OriginlocationsGetOriginLocationGetHandler originlocations.GetOriginLocationGetHandler
	// PublicCollectionsGetPublicCollectionsIDHandler sets the operation handler for the get public collections ID operation
	PublicCollectionsGetPublicCollectionsIDHandler public_collections.GetPublicCollectionsIDHandler
	// PublicObjectsGetPublicObjectsIDHandler sets the operation handler for the get public objects ID operation
	PublicObjectsGetPublicObjectsIDHandler public_objects.GetPublicObjectsIDHandler
	// ReferencesGetReferencesHandler sets the operation handler for the get references operation
	ReferencesGetReferencesHandler references.GetReferencesHandler
	// RightsGetRightHandler sets the operation handler for the get right operation
	RightsGetRightHandler rights.GetRightHandler
	// RootsGetRootByUserHandler sets the operation handler for the get root by user operation
	RootsGetRootByUserHandler roots.GetRootByUserHandler
	// RootsGetRootIDHandler sets the operation handler for the get root ID operation
	RootsGetRootIDHandler roots.GetRootIDHandler
	// TasksGetTaskIDHandler sets the operation handler for the get task ID operation
	TasksGetTaskIDHandler tasks.GetTaskIDHandler
	// TasksGetTaskMyListHandler sets the operation handler for the get task my list operation
	TasksGetTaskMyListHandler tasks.GetTaskMyListHandler
	// TeamsGetTeamByRootIDHandler sets the operation handler for the get team by root ID operation
	TeamsGetTeamByRootIDHandler teams.GetTeamByRootIDHandler
	// UsersGetUserAboutHandler sets the operation handler for the get user about operation
	UsersGetUserAboutHandler users.GetUserAboutHandler
	// UsersBanListGetUsersBanListHandler sets the operation handler for the get users ban list operation
	UsersBanListGetUsersBanListHandler users_ban_list.GetUsersBanListHandler
	// ActorsPostActorIDUpdateHandler sets the operation handler for the post actor ID update operation
	ActorsPostActorIDUpdateHandler actors.PostActorIDUpdateHandler
	// ActorsPostActorNewHandler sets the operation handler for the post actor new operation
	ActorsPostActorNewHandler actors.PostActorNewHandler
	// AuthPostAuthLoginHandler sets the operation handler for the post auth login operation
	AuthPostAuthLoginHandler auth.PostAuthLoginHandler
	// AuthPostAuthLogoutHandler sets the operation handler for the post auth logout operation
	AuthPostAuthLogoutHandler auth.PostAuthLogoutHandler
	// AuthPostAuthPasswordRecoveryHandler sets the operation handler for the post auth password recovery operation
	AuthPostAuthPasswordRecoveryHandler auth.PostAuthPasswordRecoveryHandler
	// AuthPostAuthPasswordResetTokenHandler sets the operation handler for the post auth password reset token operation
	AuthPostAuthPasswordResetTokenHandler auth.PostAuthPasswordResetTokenHandler
	// AuthPostAuthRegHandler sets the operation handler for the post auth reg operation
	AuthPostAuthRegHandler auth.PostAuthRegHandler
	// AuthPostAuthRegConfirmEmailHandler sets the operation handler for the post auth reg confirm email operation
	AuthPostAuthRegConfirmEmailHandler auth.PostAuthRegConfirmEmailHandler
	// BadgesPostBadgeIDUpdateHandler sets the operation handler for the post badge ID update operation
	BadgesPostBadgeIDUpdateHandler badges.PostBadgeIDUpdateHandler
	// BadgesPostBadgeNewHandler sets the operation handler for the post badge new operation
	BadgesPostBadgeNewHandler badges.PostBadgeNewHandler
	// ChatPostChatHandler sets the operation handler for the post chat operation
	ChatPostChatHandler chat.PostChatHandler
	// ChatPostChatAddUserHandler sets the operation handler for the post chat add user operation
	ChatPostChatAddUserHandler chat.PostChatAddUserHandler
	// ChatPostChatIDChangeAvatarHandler sets the operation handler for the post chat ID change avatar operation
	ChatPostChatIDChangeAvatarHandler chat.PostChatIDChangeAvatarHandler
	// ChatPostChatIDChangeNameHandler sets the operation handler for the post chat ID change name operation
	ChatPostChatIDChangeNameHandler chat.PostChatIDChangeNameHandler
	// ChatPostChatRemoveUserHandler sets the operation handler for the post chat remove user operation
	ChatPostChatRemoveUserHandler chat.PostChatRemoveUserHandler
	// CollectionsPostCollectionsHandler sets the operation handler for the post collections operation
	CollectionsPostCollectionsHandler collections.PostCollectionsHandler
	// CollectionsPostCollectionsAddToGroupHandler sets the operation handler for the post collections add to group operation
	CollectionsPostCollectionsAddToGroupHandler collections.PostCollectionsAddToGroupHandler
	// CollectionsPostCollectionsObjectsHandler sets the operation handler for the post collections objects operation
	CollectionsPostCollectionsObjectsHandler collections.PostCollectionsObjectsHandler
	// CollectionsPostCollectionsRemoveFromGroupHandler sets the operation handler for the post collections remove from group operation
	CollectionsPostCollectionsRemoveFromGroupHandler collections.PostCollectionsRemoveFromGroupHandler
	// EventsPostEventHandler sets the operation handler for the post event operation
	EventsPostEventHandler events.PostEventHandler
	// EventsPostEventConfirmHandler sets the operation handler for the post event confirm operation
	EventsPostEventConfirmHandler events.PostEventConfirmHandler
	// GroupsPostGroupsHandler sets the operation handler for the post groups operation
	GroupsPostGroupsHandler groups.PostGroupsHandler
	// InvitesPostInviteByEmailHandler sets the operation handler for the post invite by email operation
	InvitesPostInviteByEmailHandler invites.PostInviteByEmailHandler
	// InvitesPostInviteIDAcceptHandler sets the operation handler for the post invite ID accept operation
	InvitesPostInviteIDAcceptHandler invites.PostInviteIDAcceptHandler
	// InvitesPostInviteIDCancelHandler sets the operation handler for the post invite ID cancel operation
	InvitesPostInviteIDCancelHandler invites.PostInviteIDCancelHandler
	// InvitesPostInviteIDRejectHandler sets the operation handler for the post invite ID reject operation
	InvitesPostInviteIDRejectHandler invites.PostInviteIDRejectHandler
	// InvitesPostInviteNewHandler sets the operation handler for the post invite new operation
	InvitesPostInviteNewHandler invites.PostInviteNewHandler
	// MaterialsPostMaterialIDUpdateHandler sets the operation handler for the post material ID update operation
	MaterialsPostMaterialIDUpdateHandler materials.PostMaterialIDUpdateHandler
	// MaterialsPostMaterialNewHandler sets the operation handler for the post material new operation
	MaterialsPostMaterialNewHandler materials.PostMaterialNewHandler
	// MediasPostMediasHandler sets the operation handler for the post medias operation
	MediasPostMediasHandler medias.PostMediasHandler
	// MessagesPostMessageHandler sets the operation handler for the post message operation
	MessagesPostMessageHandler messages.PostMessageHandler
	// MessagesPostMessageAllConversationHandler sets the operation handler for the post message all conversation operation
	MessagesPostMessageAllConversationHandler messages.PostMessageAllConversationHandler
	// MessagesPostMessageByidsHandler sets the operation handler for the post message byids operation
	MessagesPostMessageByidsHandler messages.PostMessageByidsHandler
	// MessagesPostMessageRangeHandler sets the operation handler for the post message range operation
	MessagesPostMessageRangeHandler messages.PostMessageRangeHandler
	// MessagesPostMessageReadHistoryHandler sets the operation handler for the post message read history operation
	MessagesPostMessageReadHistoryHandler messages.PostMessageReadHistoryHandler
	// NameddateintervalsPostNamedDateIntervalIDUpdateHandler sets the operation handler for the post named date interval ID update operation
	NameddateintervalsPostNamedDateIntervalIDUpdateHandler nameddateintervals.PostNamedDateIntervalIDUpdateHandler
	// NameddateintervalsPostNamedDateIntervalNewHandler sets the operation handler for the post named date interval new operation
	NameddateintervalsPostNamedDateIntervalNewHandler nameddateintervals.PostNamedDateIntervalNewHandler
	// ObjectstatusPostObjectStatusNewHandler sets the operation handler for the post object status new operation
	ObjectstatusPostObjectStatusNewHandler objectstatus.PostObjectStatusNewHandler
	// ObjectsPostObjectsHandler sets the operation handler for the post objects operation
	ObjectsPostObjectsHandler objects.PostObjectsHandler
	// ObjectsPostObjectsDeleteHandler sets the operation handler for the post objects delete operation
	ObjectsPostObjectsDeleteHandler objects.PostObjectsDeleteHandler
	// ObjectsPostObjectsMoveHandler sets the operation handler for the post objects move operation
	ObjectsPostObjectsMoveHandler objects.PostObjectsMoveHandler
	// ObjectsPostObjectsSearchHandler sets the operation handler for the post objects search operation
	ObjectsPostObjectsSearchHandler objects.PostObjectsSearchHandler
	// OriginlocationsPostOriginLocationIDUpdateHandler sets the operation handler for the post origin location ID update operation
	OriginlocationsPostOriginLocationIDUpdateHandler originlocations.PostOriginLocationIDUpdateHandler
	// OriginlocationsPostOriginLocationNewHandler sets the operation handler for the post origin location new operation
	OriginlocationsPostOriginLocationNewHandler originlocations.PostOriginLocationNewHandler
	// PublicCollectionsPostPublicCollectionsHandler sets the operation handler for the post public collections operation
	PublicCollectionsPostPublicCollectionsHandler public_collections.PostPublicCollectionsHandler
	// PublicCollectionsPostPublicCollectionsObjectsHandler sets the operation handler for the post public collections objects operation
	PublicCollectionsPostPublicCollectionsObjectsHandler public_collections.PostPublicCollectionsObjectsHandler
	// RootsPostRootAddUserHandler sets the operation handler for the post root add user operation
	RootsPostRootAddUserHandler roots.PostRootAddUserHandler
	// RootsPostRootRemoveUserHandler sets the operation handler for the post root remove user operation
	RootsPostRootRemoveUserHandler roots.PostRootRemoveUserHandler
	// SessionPostSessionRegisterDeviceTokenHandler sets the operation handler for the post session register device token operation
	SessionPostSessionRegisterDeviceTokenHandler session.PostSessionRegisterDeviceTokenHandler
	// TasksPostTaskHandler sets the operation handler for the post task operation
	TasksPostTaskHandler tasks.PostTaskHandler
	// TasksPostTaskIDArchiveHandler sets the operation handler for the post task ID archive operation
	TasksPostTaskIDArchiveHandler tasks.PostTaskIDArchiveHandler
	// TasksPostTaskIDAssignToHandler sets the operation handler for the post task ID assign to operation
	TasksPostTaskIDAssignToHandler tasks.PostTaskIDAssignToHandler
	// TasksPostTaskIDChangeStatusHandler sets the operation handler for the post task ID change status operation
	TasksPostTaskIDChangeStatusHandler tasks.PostTaskIDChangeStatusHandler
	// TasksPostTaskMyArchiveListHandler sets the operation handler for the post task my archive list operation
	TasksPostTaskMyArchiveListHandler tasks.PostTaskMyArchiveListHandler
	// UsersPostUserSearchByNameHandler sets the operation handler for the post user search by name operation
	UsersPostUserSearchByNameHandler users.PostUserSearchByNameHandler
	// UsersBanListPostUsersBanListAddHandler sets the operation handler for the post users ban list add operation
	UsersBanListPostUsersBanListAddHandler users_ban_list.PostUsersBanListAddHandler
	// UsersBanListPostUsersBanListRemoveHandler sets the operation handler for the post users ban list remove operation
	UsersBanListPostUsersBanListRemoveHandler users_ban_list.PostUsersBanListRemoveHandler
	// CollectionsPutCollectionsIDHandler sets the operation handler for the put collections ID operation
	CollectionsPutCollectionsIDHandler collections.PutCollectionsIDHandler
	// GroupsPutGroupsIDUpdateHandler sets the operation handler for the put groups ID update operation
	GroupsPutGroupsIDUpdateHandler groups.PutGroupsIDUpdateHandler
	// ObjectsPutObjectsIDHandler sets the operation handler for the put objects ID operation
	ObjectsPutObjectsIDHandler objects.PutObjectsIDHandler
	// RightsPutRightHandler sets the operation handler for the put right operation
	RightsPutRightHandler rights.PutRightHandler
	// TasksPutTaskIDHandler sets the operation handler for the put task ID operation
	TasksPutTaskIDHandler tasks.PutTaskIDHandler
	// UsersPutUserHandler sets the operation handler for the put user operation
	UsersPutUserHandler users.PutUserHandler
	// UsersPutUserUpdateLocaleHandler sets the operation handler for the put user update locale operation
	UsersPutUserUpdateLocaleHandler users.PutUserUpdateLocaleHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *CollectordAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *CollectordAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *CollectordAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *CollectordAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *CollectordAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *CollectordAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *CollectordAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the CollectordAPI
func (o *CollectordAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeyAuth == nil {
		unregistered = append(unregistered, "AuthTokenAuth")
	}

	if o.ActorsDeleteActorIDDeleteHandler == nil {
		unregistered = append(unregistered, "actors.DeleteActorIDDeleteHandler")
	}

	if o.BadgesDeleteBadgeIDDeleteHandler == nil {
		unregistered = append(unregistered, "badges.DeleteBadgeIDDeleteHandler")
	}

	if o.CollectionsDeleteCollectionsIDDeleteHandler == nil {
		unregistered = append(unregistered, "collections.DeleteCollectionsIDDeleteHandler")
	}

	if o.GroupsDeleteGroupsIDDeleteHandler == nil {
		unregistered = append(unregistered, "groups.DeleteGroupsIDDeleteHandler")
	}

	if o.MaterialsDeleteMaterialIDDeleteHandler == nil {
		unregistered = append(unregistered, "materials.DeleteMaterialIDDeleteHandler")
	}

	if o.NameddateintervalsDeleteNamedDateIntervalIDDeleteHandler == nil {
		unregistered = append(unregistered, "nameddateintervals.DeleteNamedDateIntervalIDDeleteHandler")
	}

	if o.ObjectsDeleteObjectsIDDeleteHandler == nil {
		unregistered = append(unregistered, "objects.DeleteObjectsIDDeleteHandler")
	}

	if o.OriginlocationsDeleteOriginLocationIDDeleteHandler == nil {
		unregistered = append(unregistered, "originlocations.DeleteOriginLocationIDDeleteHandler")
	}

	if o.TasksDeleteTaskIDHandler == nil {
		unregistered = append(unregistered, "tasks.DeleteTaskIDHandler")
	}

	if o.ActorsGetActorGetHandler == nil {
		unregistered = append(unregistered, "actors.GetActorGetHandler")
	}

	if o.AuthGetAuthRegConfirmEmailHandler == nil {
		unregistered = append(unregistered, "auth.GetAuthRegConfirmEmailHandler")
	}

	if o.BadgesGetBadgeGetHandler == nil {
		unregistered = append(unregistered, "badges.GetBadgeGetHandler")
	}

	if o.ChatGetChatIDHandler == nil {
		unregistered = append(unregistered, "chat.GetChatIDHandler")
	}

	if o.CollectionsGetCollectionsDraftHandler == nil {
		unregistered = append(unregistered, "collections.GetCollectionsDraftHandler")
	}

	if o.CollectionsGetCollectionsIDHandler == nil {
		unregistered = append(unregistered, "collections.GetCollectionsIDHandler")
	}

	if o.DashboardGetDashboardHandler == nil {
		unregistered = append(unregistered, "dashboard.GetDashboardHandler")
	}

	if o.GroupsGetGroupsIDHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupsIDHandler")
	}

	if o.MaterialsGetMaterialGetHandler == nil {
		unregistered = append(unregistered, "materials.GetMaterialGetHandler")
	}

	if o.MediasGetMediasHandler == nil {
		unregistered = append(unregistered, "medias.GetMediasHandler")
	}

	if o.MediasGetMediasByIdsHandler == nil {
		unregistered = append(unregistered, "medias.GetMediasByIdsHandler")
	}

	if o.NameddateintervalsGetNamedDateIntervalGetHandler == nil {
		unregistered = append(unregistered, "nameddateintervals.GetNamedDateIntervalGetHandler")
	}

	if o.ObjectsGetObjectsIDHandler == nil {
		unregistered = append(unregistered, "objects.GetObjectsIDHandler")
	}

	if o.OriginlocationsGetOriginLocationGetHandler == nil {
		unregistered = append(unregistered, "originlocations.GetOriginLocationGetHandler")
	}

	if o.PublicCollectionsGetPublicCollectionsIDHandler == nil {
		unregistered = append(unregistered, "public_collections.GetPublicCollectionsIDHandler")
	}

	if o.PublicObjectsGetPublicObjectsIDHandler == nil {
		unregistered = append(unregistered, "public_objects.GetPublicObjectsIDHandler")
	}

	if o.ReferencesGetReferencesHandler == nil {
		unregistered = append(unregistered, "references.GetReferencesHandler")
	}

	if o.RightsGetRightHandler == nil {
		unregistered = append(unregistered, "rights.GetRightHandler")
	}

	if o.RootsGetRootByUserHandler == nil {
		unregistered = append(unregistered, "roots.GetRootByUserHandler")
	}

	if o.RootsGetRootIDHandler == nil {
		unregistered = append(unregistered, "roots.GetRootIDHandler")
	}

	if o.TasksGetTaskIDHandler == nil {
		unregistered = append(unregistered, "tasks.GetTaskIDHandler")
	}

	if o.TasksGetTaskMyListHandler == nil {
		unregistered = append(unregistered, "tasks.GetTaskMyListHandler")
	}

	if o.TeamsGetTeamByRootIDHandler == nil {
		unregistered = append(unregistered, "teams.GetTeamByRootIDHandler")
	}

	if o.UsersGetUserAboutHandler == nil {
		unregistered = append(unregistered, "users.GetUserAboutHandler")
	}

	if o.UsersBanListGetUsersBanListHandler == nil {
		unregistered = append(unregistered, "users_ban_list.GetUsersBanListHandler")
	}

	if o.ActorsPostActorIDUpdateHandler == nil {
		unregistered = append(unregistered, "actors.PostActorIDUpdateHandler")
	}

	if o.ActorsPostActorNewHandler == nil {
		unregistered = append(unregistered, "actors.PostActorNewHandler")
	}

	if o.AuthPostAuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.PostAuthLoginHandler")
	}

	if o.AuthPostAuthLogoutHandler == nil {
		unregistered = append(unregistered, "auth.PostAuthLogoutHandler")
	}

	if o.AuthPostAuthPasswordRecoveryHandler == nil {
		unregistered = append(unregistered, "auth.PostAuthPasswordRecoveryHandler")
	}

	if o.AuthPostAuthPasswordResetTokenHandler == nil {
		unregistered = append(unregistered, "auth.PostAuthPasswordResetTokenHandler")
	}

	if o.AuthPostAuthRegHandler == nil {
		unregistered = append(unregistered, "auth.PostAuthRegHandler")
	}

	if o.AuthPostAuthRegConfirmEmailHandler == nil {
		unregistered = append(unregistered, "auth.PostAuthRegConfirmEmailHandler")
	}

	if o.BadgesPostBadgeIDUpdateHandler == nil {
		unregistered = append(unregistered, "badges.PostBadgeIDUpdateHandler")
	}

	if o.BadgesPostBadgeNewHandler == nil {
		unregistered = append(unregistered, "badges.PostBadgeNewHandler")
	}

	if o.ChatPostChatHandler == nil {
		unregistered = append(unregistered, "chat.PostChatHandler")
	}

	if o.ChatPostChatAddUserHandler == nil {
		unregistered = append(unregistered, "chat.PostChatAddUserHandler")
	}

	if o.ChatPostChatIDChangeAvatarHandler == nil {
		unregistered = append(unregistered, "chat.PostChatIDChangeAvatarHandler")
	}

	if o.ChatPostChatIDChangeNameHandler == nil {
		unregistered = append(unregistered, "chat.PostChatIDChangeNameHandler")
	}

	if o.ChatPostChatRemoveUserHandler == nil {
		unregistered = append(unregistered, "chat.PostChatRemoveUserHandler")
	}

	if o.CollectionsPostCollectionsHandler == nil {
		unregistered = append(unregistered, "collections.PostCollectionsHandler")
	}

	if o.CollectionsPostCollectionsAddToGroupHandler == nil {
		unregistered = append(unregistered, "collections.PostCollectionsAddToGroupHandler")
	}

	if o.CollectionsPostCollectionsObjectsHandler == nil {
		unregistered = append(unregistered, "collections.PostCollectionsObjectsHandler")
	}

	if o.CollectionsPostCollectionsRemoveFromGroupHandler == nil {
		unregistered = append(unregistered, "collections.PostCollectionsRemoveFromGroupHandler")
	}

	if o.EventsPostEventHandler == nil {
		unregistered = append(unregistered, "events.PostEventHandler")
	}

	if o.EventsPostEventConfirmHandler == nil {
		unregistered = append(unregistered, "events.PostEventConfirmHandler")
	}

	if o.GroupsPostGroupsHandler == nil {
		unregistered = append(unregistered, "groups.PostGroupsHandler")
	}

	if o.InvitesPostInviteByEmailHandler == nil {
		unregistered = append(unregistered, "invites.PostInviteByEmailHandler")
	}

	if o.InvitesPostInviteIDAcceptHandler == nil {
		unregistered = append(unregistered, "invites.PostInviteIDAcceptHandler")
	}

	if o.InvitesPostInviteIDCancelHandler == nil {
		unregistered = append(unregistered, "invites.PostInviteIDCancelHandler")
	}

	if o.InvitesPostInviteIDRejectHandler == nil {
		unregistered = append(unregistered, "invites.PostInviteIDRejectHandler")
	}

	if o.InvitesPostInviteNewHandler == nil {
		unregistered = append(unregistered, "invites.PostInviteNewHandler")
	}

	if o.MaterialsPostMaterialIDUpdateHandler == nil {
		unregistered = append(unregistered, "materials.PostMaterialIDUpdateHandler")
	}

	if o.MaterialsPostMaterialNewHandler == nil {
		unregistered = append(unregistered, "materials.PostMaterialNewHandler")
	}

	if o.MediasPostMediasHandler == nil {
		unregistered = append(unregistered, "medias.PostMediasHandler")
	}

	if o.MessagesPostMessageHandler == nil {
		unregistered = append(unregistered, "messages.PostMessageHandler")
	}

	if o.MessagesPostMessageAllConversationHandler == nil {
		unregistered = append(unregistered, "messages.PostMessageAllConversationHandler")
	}

	if o.MessagesPostMessageByidsHandler == nil {
		unregistered = append(unregistered, "messages.PostMessageByidsHandler")
	}

	if o.MessagesPostMessageRangeHandler == nil {
		unregistered = append(unregistered, "messages.PostMessageRangeHandler")
	}

	if o.MessagesPostMessageReadHistoryHandler == nil {
		unregistered = append(unregistered, "messages.PostMessageReadHistoryHandler")
	}

	if o.NameddateintervalsPostNamedDateIntervalIDUpdateHandler == nil {
		unregistered = append(unregistered, "nameddateintervals.PostNamedDateIntervalIDUpdateHandler")
	}

	if o.NameddateintervalsPostNamedDateIntervalNewHandler == nil {
		unregistered = append(unregistered, "nameddateintervals.PostNamedDateIntervalNewHandler")
	}

	if o.ObjectstatusPostObjectStatusNewHandler == nil {
		unregistered = append(unregistered, "objectstatus.PostObjectStatusNewHandler")
	}

	if o.ObjectsPostObjectsHandler == nil {
		unregistered = append(unregistered, "objects.PostObjectsHandler")
	}

	if o.ObjectsPostObjectsDeleteHandler == nil {
		unregistered = append(unregistered, "objects.PostObjectsDeleteHandler")
	}

	if o.ObjectsPostObjectsMoveHandler == nil {
		unregistered = append(unregistered, "objects.PostObjectsMoveHandler")
	}

	if o.ObjectsPostObjectsSearchHandler == nil {
		unregistered = append(unregistered, "objects.PostObjectsSearchHandler")
	}

	if o.OriginlocationsPostOriginLocationIDUpdateHandler == nil {
		unregistered = append(unregistered, "originlocations.PostOriginLocationIDUpdateHandler")
	}

	if o.OriginlocationsPostOriginLocationNewHandler == nil {
		unregistered = append(unregistered, "originlocations.PostOriginLocationNewHandler")
	}

	if o.PublicCollectionsPostPublicCollectionsHandler == nil {
		unregistered = append(unregistered, "public_collections.PostPublicCollectionsHandler")
	}

	if o.PublicCollectionsPostPublicCollectionsObjectsHandler == nil {
		unregistered = append(unregistered, "public_collections.PostPublicCollectionsObjectsHandler")
	}

	if o.RootsPostRootAddUserHandler == nil {
		unregistered = append(unregistered, "roots.PostRootAddUserHandler")
	}

	if o.RootsPostRootRemoveUserHandler == nil {
		unregistered = append(unregistered, "roots.PostRootRemoveUserHandler")
	}

	if o.SessionPostSessionRegisterDeviceTokenHandler == nil {
		unregistered = append(unregistered, "session.PostSessionRegisterDeviceTokenHandler")
	}

	if o.TasksPostTaskHandler == nil {
		unregistered = append(unregistered, "tasks.PostTaskHandler")
	}

	if o.TasksPostTaskIDArchiveHandler == nil {
		unregistered = append(unregistered, "tasks.PostTaskIDArchiveHandler")
	}

	if o.TasksPostTaskIDAssignToHandler == nil {
		unregistered = append(unregistered, "tasks.PostTaskIDAssignToHandler")
	}

	if o.TasksPostTaskIDChangeStatusHandler == nil {
		unregistered = append(unregistered, "tasks.PostTaskIDChangeStatusHandler")
	}

	if o.TasksPostTaskMyArchiveListHandler == nil {
		unregistered = append(unregistered, "tasks.PostTaskMyArchiveListHandler")
	}

	if o.UsersPostUserSearchByNameHandler == nil {
		unregistered = append(unregistered, "users.PostUserSearchByNameHandler")
	}

	if o.UsersBanListPostUsersBanListAddHandler == nil {
		unregistered = append(unregistered, "users_ban_list.PostUsersBanListAddHandler")
	}

	if o.UsersBanListPostUsersBanListRemoveHandler == nil {
		unregistered = append(unregistered, "users_ban_list.PostUsersBanListRemoveHandler")
	}

	if o.CollectionsPutCollectionsIDHandler == nil {
		unregistered = append(unregistered, "collections.PutCollectionsIDHandler")
	}

	if o.GroupsPutGroupsIDUpdateHandler == nil {
		unregistered = append(unregistered, "groups.PutGroupsIDUpdateHandler")
	}

	if o.ObjectsPutObjectsIDHandler == nil {
		unregistered = append(unregistered, "objects.PutObjectsIDHandler")
	}

	if o.RightsPutRightHandler == nil {
		unregistered = append(unregistered, "rights.PutRightHandler")
	}

	if o.TasksPutTaskIDHandler == nil {
		unregistered = append(unregistered, "tasks.PutTaskIDHandler")
	}

	if o.UsersPutUserHandler == nil {
		unregistered = append(unregistered, "users.PutUserHandler")
	}

	if o.UsersPutUserUpdateLocaleHandler == nil {
		unregistered = append(unregistered, "users.PutUserUpdateLocaleHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *CollectordAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *CollectordAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "apiKey":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.APIKeyAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *CollectordAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *CollectordAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *CollectordAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *CollectordAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the collectord API
func (o *CollectordAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *CollectordAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/actor/{ID}/delete"] = actors.NewDeleteActorIDDelete(o.context, o.ActorsDeleteActorIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/badge/{ID}/delete"] = badges.NewDeleteBadgeIDDelete(o.context, o.BadgesDeleteBadgeIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/collections/{ID}/delete"] = collections.NewDeleteCollectionsIDDelete(o.context, o.CollectionsDeleteCollectionsIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/groups/{ID}/delete"] = groups.NewDeleteGroupsIDDelete(o.context, o.GroupsDeleteGroupsIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/material/{ID}/delete"] = materials.NewDeleteMaterialIDDelete(o.context, o.MaterialsDeleteMaterialIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/named-date-interval/{ID}/delete"] = nameddateintervals.NewDeleteNamedDateIntervalIDDelete(o.context, o.NameddateintervalsDeleteNamedDateIntervalIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/objects/{ID}/delete"] = objects.NewDeleteObjectsIDDelete(o.context, o.ObjectsDeleteObjectsIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/origin-location/{ID}/delete"] = originlocations.NewDeleteOriginLocationIDDelete(o.context, o.OriginlocationsDeleteOriginLocationIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/task/{id}"] = tasks.NewDeleteTaskID(o.context, o.TasksDeleteTaskIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actor/get"] = actors.NewGetActorGet(o.context, o.ActorsGetActorGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/reg/confirm-email"] = auth.NewGetAuthRegConfirmEmail(o.context, o.AuthGetAuthRegConfirmEmailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/badge/get"] = badges.NewGetBadgeGet(o.context, o.BadgesGetBadgeGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chat/{ID}"] = chat.NewGetChatID(o.context, o.ChatGetChatIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/collections/draft"] = collections.NewGetCollectionsDraft(o.context, o.CollectionsGetCollectionsDraftHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/collections/{ID}"] = collections.NewGetCollectionsID(o.context, o.CollectionsGetCollectionsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboard"] = dashboard.NewGetDashboard(o.context, o.DashboardGetDashboardHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/groups/{ID}"] = groups.NewGetGroupsID(o.context, o.GroupsGetGroupsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/material/get"] = materials.NewGetMaterialGet(o.context, o.MaterialsGetMaterialGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/medias"] = medias.NewGetMedias(o.context, o.MediasGetMediasHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/medias/by-ids"] = medias.NewGetMediasByIds(o.context, o.MediasGetMediasByIdsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/named-date-interval/get"] = nameddateintervals.NewGetNamedDateIntervalGet(o.context, o.NameddateintervalsGetNamedDateIntervalGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/objects/{ID}"] = objects.NewGetObjectsID(o.context, o.ObjectsGetObjectsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/origin-location/get"] = originlocations.NewGetOriginLocationGet(o.context, o.OriginlocationsGetOriginLocationGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/public/collections/{ID}"] = public_collections.NewGetPublicCollectionsID(o.context, o.PublicCollectionsGetPublicCollectionsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/public/objects/{ID}"] = public_objects.NewGetPublicObjectsID(o.context, o.PublicObjectsGetPublicObjectsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/references"] = references.NewGetReferences(o.context, o.ReferencesGetReferencesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/right"] = rights.NewGetRight(o.context, o.RightsGetRightHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/root/by-user"] = roots.NewGetRootByUser(o.context, o.RootsGetRootByUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/root/{ID}"] = roots.NewGetRootID(o.context, o.RootsGetRootIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/task/{id}"] = tasks.NewGetTaskID(o.context, o.TasksGetTaskIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/task/my-list"] = tasks.NewGetTaskMyList(o.context, o.TasksGetTaskMyListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/team/by-root-id"] = teams.NewGetTeamByRootID(o.context, o.TeamsGetTeamByRootIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/about"] = users.NewGetUserAbout(o.context, o.UsersGetUserAboutHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/ban-list"] = users_ban_list.NewGetUsersBanList(o.context, o.UsersBanListGetUsersBanListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actor/{ID}/update"] = actors.NewPostActorIDUpdate(o.context, o.ActorsPostActorIDUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/actor/new"] = actors.NewPostActorNew(o.context, o.ActorsPostActorNewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/login"] = auth.NewPostAuthLogin(o.context, o.AuthPostAuthLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/logout"] = auth.NewPostAuthLogout(o.context, o.AuthPostAuthLogoutHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/password-recovery"] = auth.NewPostAuthPasswordRecovery(o.context, o.AuthPostAuthPasswordRecoveryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/password-reset/{token}"] = auth.NewPostAuthPasswordResetToken(o.context, o.AuthPostAuthPasswordResetTokenHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/reg"] = auth.NewPostAuthReg(o.context, o.AuthPostAuthRegHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/reg/confirm-email"] = auth.NewPostAuthRegConfirmEmail(o.context, o.AuthPostAuthRegConfirmEmailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/badge/{ID}/update"] = badges.NewPostBadgeIDUpdate(o.context, o.BadgesPostBadgeIDUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/badge/new"] = badges.NewPostBadgeNew(o.context, o.BadgesPostBadgeNewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/chat"] = chat.NewPostChat(o.context, o.ChatPostChatHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/chat/add-user"] = chat.NewPostChatAddUser(o.context, o.ChatPostChatAddUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/chat/{ID}/change-avatar"] = chat.NewPostChatIDChangeAvatar(o.context, o.ChatPostChatIDChangeAvatarHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/chat/{ID}/change-name"] = chat.NewPostChatIDChangeName(o.context, o.ChatPostChatIDChangeNameHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/chat/remove-user"] = chat.NewPostChatRemoveUser(o.context, o.ChatPostChatRemoveUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/collections"] = collections.NewPostCollections(o.context, o.CollectionsPostCollectionsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/collections/add-to-group"] = collections.NewPostCollectionsAddToGroup(o.context, o.CollectionsPostCollectionsAddToGroupHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/collections/objects"] = collections.NewPostCollectionsObjects(o.context, o.CollectionsPostCollectionsObjectsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/collections/remove-from-group"] = collections.NewPostCollectionsRemoveFromGroup(o.context, o.CollectionsPostCollectionsRemoveFromGroupHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/event"] = events.NewPostEvent(o.context, o.EventsPostEventHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/event/confirm"] = events.NewPostEventConfirm(o.context, o.EventsPostEventConfirmHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/groups"] = groups.NewPostGroups(o.context, o.GroupsPostGroupsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invite/by-email"] = invites.NewPostInviteByEmail(o.context, o.InvitesPostInviteByEmailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invite/{ID}/accept"] = invites.NewPostInviteIDAccept(o.context, o.InvitesPostInviteIDAcceptHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invite/{ID}/cancel"] = invites.NewPostInviteIDCancel(o.context, o.InvitesPostInviteIDCancelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invite/{ID}/reject"] = invites.NewPostInviteIDReject(o.context, o.InvitesPostInviteIDRejectHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invite/new"] = invites.NewPostInviteNew(o.context, o.InvitesPostInviteNewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/material/{ID}/update"] = materials.NewPostMaterialIDUpdate(o.context, o.MaterialsPostMaterialIDUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/material/new"] = materials.NewPostMaterialNew(o.context, o.MaterialsPostMaterialNewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/medias"] = medias.NewPostMedias(o.context, o.MediasPostMediasHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message"] = messages.NewPostMessage(o.context, o.MessagesPostMessageHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/all-conversation"] = messages.NewPostMessageAllConversation(o.context, o.MessagesPostMessageAllConversationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/byids"] = messages.NewPostMessageByids(o.context, o.MessagesPostMessageByidsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/range"] = messages.NewPostMessageRange(o.context, o.MessagesPostMessageRangeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/read-history"] = messages.NewPostMessageReadHistory(o.context, o.MessagesPostMessageReadHistoryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/named-date-interval/{ID}/update"] = nameddateintervals.NewPostNamedDateIntervalIDUpdate(o.context, o.NameddateintervalsPostNamedDateIntervalIDUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/named-date-interval/new"] = nameddateintervals.NewPostNamedDateIntervalNew(o.context, o.NameddateintervalsPostNamedDateIntervalNewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/object-status/new"] = objectstatus.NewPostObjectStatusNew(o.context, o.ObjectstatusPostObjectStatusNewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/objects"] = objects.NewPostObjects(o.context, o.ObjectsPostObjectsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/objects/delete"] = objects.NewPostObjectsDelete(o.context, o.ObjectsPostObjectsDeleteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/objects/move"] = objects.NewPostObjectsMove(o.context, o.ObjectsPostObjectsMoveHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/objects/search"] = objects.NewPostObjectsSearch(o.context, o.ObjectsPostObjectsSearchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/origin-location/{ID}/update"] = originlocations.NewPostOriginLocationIDUpdate(o.context, o.OriginlocationsPostOriginLocationIDUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/origin-location/new"] = originlocations.NewPostOriginLocationNew(o.context, o.OriginlocationsPostOriginLocationNewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/public/collections"] = public_collections.NewPostPublicCollections(o.context, o.PublicCollectionsPostPublicCollectionsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/public/collections/objects"] = public_collections.NewPostPublicCollectionsObjects(o.context, o.PublicCollectionsPostPublicCollectionsObjectsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/root/add-user"] = roots.NewPostRootAddUser(o.context, o.RootsPostRootAddUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/root/remove-user"] = roots.NewPostRootRemoveUser(o.context, o.RootsPostRootRemoveUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/session/register-device-token"] = session.NewPostSessionRegisterDeviceToken(o.context, o.SessionPostSessionRegisterDeviceTokenHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/task"] = tasks.NewPostTask(o.context, o.TasksPostTaskHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/task/{id}/archive"] = tasks.NewPostTaskIDArchive(o.context, o.TasksPostTaskIDArchiveHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/task/{id}/assign-to"] = tasks.NewPostTaskIDAssignTo(o.context, o.TasksPostTaskIDAssignToHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/task/{id}/change-status"] = tasks.NewPostTaskIDChangeStatus(o.context, o.TasksPostTaskIDChangeStatusHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/task/my-archive-list"] = tasks.NewPostTaskMyArchiveList(o.context, o.TasksPostTaskMyArchiveListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/search-by-name"] = users.NewPostUserSearchByName(o.context, o.UsersPostUserSearchByNameHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/ban-list/add"] = users_ban_list.NewPostUsersBanListAdd(o.context, o.UsersBanListPostUsersBanListAddHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/ban-list/remove"] = users_ban_list.NewPostUsersBanListRemove(o.context, o.UsersBanListPostUsersBanListRemoveHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/collections/{ID}"] = collections.NewPutCollectionsID(o.context, o.CollectionsPutCollectionsIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/groups/{ID}/update"] = groups.NewPutGroupsIDUpdate(o.context, o.GroupsPutGroupsIDUpdateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/objects/{ID}"] = objects.NewPutObjectsID(o.context, o.ObjectsPutObjectsIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/right"] = rights.NewPutRight(o.context, o.RightsPutRightHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/task/{id}"] = tasks.NewPutTaskID(o.context, o.TasksPutTaskIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user"] = users.NewPutUser(o.context, o.UsersPutUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/update/locale"] = users.NewPutUserUpdateLocale(o.context, o.UsersPutUserUpdateLocaleHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *CollectordAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *CollectordAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *CollectordAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *CollectordAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
