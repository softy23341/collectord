// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// GetTaskIDOKCode is the HTTP code returned for type GetTaskIDOK
const GetTaskIDOKCode int = 200

/*GetTaskIDOK success

swagger:response getTaskIdOK
*/
type GetTaskIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.AGetTask `json:"body,omitempty"`
}

// NewGetTaskIDOK creates GetTaskIDOK with default headers values
func NewGetTaskIDOK() *GetTaskIDOK {

	return &GetTaskIDOK{}
}

// WithPayload adds the payload to the get task Id o k response
func (o *GetTaskIDOK) WithPayload(payload *models.AGetTask) *GetTaskIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task Id o k response
func (o *GetTaskIDOK) SetPayload(payload *models.AGetTask) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTaskIDForbiddenCode is the HTTP code returned for type GetTaskIDForbidden
const GetTaskIDForbiddenCode int = 403

/*GetTaskIDForbidden access error

swagger:response getTaskIdForbidden
*/
type GetTaskIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTaskIDForbidden creates GetTaskIDForbidden with default headers values
func NewGetTaskIDForbidden() *GetTaskIDForbidden {

	return &GetTaskIDForbidden{}
}

// WithPayload adds the payload to the get task Id forbidden response
func (o *GetTaskIDForbidden) WithPayload(payload *models.Error) *GetTaskIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task Id forbidden response
func (o *GetTaskIDForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTaskIDNotFoundCode is the HTTP code returned for type GetTaskIDNotFound
const GetTaskIDNotFoundCode int = 404

/*GetTaskIDNotFound cant find the task

swagger:response getTaskIdNotFound
*/
type GetTaskIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTaskIDNotFound creates GetTaskIDNotFound with default headers values
func NewGetTaskIDNotFound() *GetTaskIDNotFound {

	return &GetTaskIDNotFound{}
}

// WithPayload adds the payload to the get task Id not found response
func (o *GetTaskIDNotFound) WithPayload(payload *models.Error) *GetTaskIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task Id not found response
func (o *GetTaskIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetTaskIDDefault Unexpected error

swagger:response getTaskIdDefault
*/
type GetTaskIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTaskIDDefault creates GetTaskIDDefault with default headers values
func NewGetTaskIDDefault(code int) *GetTaskIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetTaskIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get task ID default response
func (o *GetTaskIDDefault) WithStatusCode(code int) *GetTaskIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get task ID default response
func (o *GetTaskIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get task ID default response
func (o *GetTaskIDDefault) WithPayload(payload *models.Error) *GetTaskIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task ID default response
func (o *GetTaskIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
