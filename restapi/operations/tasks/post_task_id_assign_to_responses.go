// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostTaskIDAssignToNoContentCode is the HTTP code returned for type PostTaskIDAssignToNoContent
const PostTaskIDAssignToNoContentCode int = 204

/*PostTaskIDAssignToNoContent success

swagger:response postTaskIdAssignToNoContent
*/
type PostTaskIDAssignToNoContent struct {
}

// NewPostTaskIDAssignToNoContent creates PostTaskIDAssignToNoContent with default headers values
func NewPostTaskIDAssignToNoContent() *PostTaskIDAssignToNoContent {

	return &PostTaskIDAssignToNoContent{}
}

// WriteResponse to the client
func (o *PostTaskIDAssignToNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PostTaskIDAssignToForbiddenCode is the HTTP code returned for type PostTaskIDAssignToForbidden
const PostTaskIDAssignToForbiddenCode int = 403

/*PostTaskIDAssignToForbidden Forbidden

swagger:response postTaskIdAssignToForbidden
*/
type PostTaskIDAssignToForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostTaskIDAssignToForbidden creates PostTaskIDAssignToForbidden with default headers values
func NewPostTaskIDAssignToForbidden() *PostTaskIDAssignToForbidden {

	return &PostTaskIDAssignToForbidden{}
}

// WithPayload adds the payload to the post task Id assign to forbidden response
func (o *PostTaskIDAssignToForbidden) WithPayload(payload *models.Error) *PostTaskIDAssignToForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post task Id assign to forbidden response
func (o *PostTaskIDAssignToForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTaskIDAssignToForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTaskIDAssignToNotFoundCode is the HTTP code returned for type PostTaskIDAssignToNotFound
const PostTaskIDAssignToNotFoundCode int = 404

/*PostTaskIDAssignToNotFound cant find the task

swagger:response postTaskIdAssignToNotFound
*/
type PostTaskIDAssignToNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostTaskIDAssignToNotFound creates PostTaskIDAssignToNotFound with default headers values
func NewPostTaskIDAssignToNotFound() *PostTaskIDAssignToNotFound {

	return &PostTaskIDAssignToNotFound{}
}

// WithPayload adds the payload to the post task Id assign to not found response
func (o *PostTaskIDAssignToNotFound) WithPayload(payload *models.Error) *PostTaskIDAssignToNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post task Id assign to not found response
func (o *PostTaskIDAssignToNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTaskIDAssignToNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTaskIDAssignToUnprocessableEntityCode is the HTTP code returned for type PostTaskIDAssignToUnprocessableEntity
const PostTaskIDAssignToUnprocessableEntityCode int = 422

/*PostTaskIDAssignToUnprocessableEntity validation error

swagger:response postTaskIdAssignToUnprocessableEntity
*/
type PostTaskIDAssignToUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostTaskIDAssignToUnprocessableEntity creates PostTaskIDAssignToUnprocessableEntity with default headers values
func NewPostTaskIDAssignToUnprocessableEntity() *PostTaskIDAssignToUnprocessableEntity {

	return &PostTaskIDAssignToUnprocessableEntity{}
}

// WithPayload adds the payload to the post task Id assign to unprocessable entity response
func (o *PostTaskIDAssignToUnprocessableEntity) WithPayload(payload *models.Error) *PostTaskIDAssignToUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post task Id assign to unprocessable entity response
func (o *PostTaskIDAssignToUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTaskIDAssignToUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostTaskIDAssignToDefault Unexpected error

swagger:response postTaskIdAssignToDefault
*/
type PostTaskIDAssignToDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostTaskIDAssignToDefault creates PostTaskIDAssignToDefault with default headers values
func NewPostTaskIDAssignToDefault(code int) *PostTaskIDAssignToDefault {
	if code <= 0 {
		code = 500
	}

	return &PostTaskIDAssignToDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post task ID assign to default response
func (o *PostTaskIDAssignToDefault) WithStatusCode(code int) *PostTaskIDAssignToDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post task ID assign to default response
func (o *PostTaskIDAssignToDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post task ID assign to default response
func (o *PostTaskIDAssignToDefault) WithPayload(payload *models.Error) *PostTaskIDAssignToDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post task ID assign to default response
func (o *PostTaskIDAssignToDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTaskIDAssignToDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
