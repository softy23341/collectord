// Code generated by go-swagger; DO NOT EDIT.

package actors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostActorNewOKCode is the HTTP code returned for type PostActorNewOK
const PostActorNewOKCode int = 200

/*PostActorNewOK Success

swagger:response postActorNewOK
*/
type PostActorNewOK struct {

	/*
	  In: Body
	*/
	Payload *models.ACreateActor `json:"body,omitempty"`
}

// NewPostActorNewOK creates PostActorNewOK with default headers values
func NewPostActorNewOK() *PostActorNewOK {

	return &PostActorNewOK{}
}

// WithPayload adds the payload to the post actor new o k response
func (o *PostActorNewOK) WithPayload(payload *models.ACreateActor) *PostActorNewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor new o k response
func (o *PostActorNewOK) SetPayload(payload *models.ACreateActor) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorNewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostActorNewForbiddenCode is the HTTP code returned for type PostActorNewForbidden
const PostActorNewForbiddenCode int = 403

/*PostActorNewForbidden Forbidden

swagger:response postActorNewForbidden
*/
type PostActorNewForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostActorNewForbidden creates PostActorNewForbidden with default headers values
func NewPostActorNewForbidden() *PostActorNewForbidden {

	return &PostActorNewForbidden{}
}

// WithPayload adds the payload to the post actor new forbidden response
func (o *PostActorNewForbidden) WithPayload(payload *models.Error) *PostActorNewForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor new forbidden response
func (o *PostActorNewForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorNewForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostActorNewConflictCode is the HTTP code returned for type PostActorNewConflict
const PostActorNewConflictCode int = 409

/*PostActorNewConflict actor already present

swagger:response postActorNewConflict
*/
type PostActorNewConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostActorNewConflict creates PostActorNewConflict with default headers values
func NewPostActorNewConflict() *PostActorNewConflict {

	return &PostActorNewConflict{}
}

// WithPayload adds the payload to the post actor new conflict response
func (o *PostActorNewConflict) WithPayload(payload *models.Error) *PostActorNewConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor new conflict response
func (o *PostActorNewConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorNewConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostActorNewDefault Unexpected error

swagger:response postActorNewDefault
*/
type PostActorNewDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostActorNewDefault creates PostActorNewDefault with default headers values
func NewPostActorNewDefault(code int) *PostActorNewDefault {
	if code <= 0 {
		code = 500
	}

	return &PostActorNewDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post actor new default response
func (o *PostActorNewDefault) WithStatusCode(code int) *PostActorNewDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post actor new default response
func (o *PostActorNewDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post actor new default response
func (o *PostActorNewDefault) WithPayload(payload *models.Error) *PostActorNewDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor new default response
func (o *PostActorNewDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorNewDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
