// Code generated by go-swagger; DO NOT EDIT.

package actors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostActorIDUpdateNoContentCode is the HTTP code returned for type PostActorIDUpdateNoContent
const PostActorIDUpdateNoContentCode int = 204

/*PostActorIDUpdateNoContent success

swagger:response postActorIdUpdateNoContent
*/
type PostActorIDUpdateNoContent struct {
}

// NewPostActorIDUpdateNoContent creates PostActorIDUpdateNoContent with default headers values
func NewPostActorIDUpdateNoContent() *PostActorIDUpdateNoContent {

	return &PostActorIDUpdateNoContent{}
}

// WriteResponse to the client
func (o *PostActorIDUpdateNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PostActorIDUpdateForbiddenCode is the HTTP code returned for type PostActorIDUpdateForbidden
const PostActorIDUpdateForbiddenCode int = 403

/*PostActorIDUpdateForbidden Forbidden

swagger:response postActorIdUpdateForbidden
*/
type PostActorIDUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostActorIDUpdateForbidden creates PostActorIDUpdateForbidden with default headers values
func NewPostActorIDUpdateForbidden() *PostActorIDUpdateForbidden {

	return &PostActorIDUpdateForbidden{}
}

// WithPayload adds the payload to the post actor Id update forbidden response
func (o *PostActorIDUpdateForbidden) WithPayload(payload *models.Error) *PostActorIDUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor Id update forbidden response
func (o *PostActorIDUpdateForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorIDUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostActorIDUpdateNotFoundCode is the HTTP code returned for type PostActorIDUpdateNotFound
const PostActorIDUpdateNotFoundCode int = 404

/*PostActorIDUpdateNotFound not found

swagger:response postActorIdUpdateNotFound
*/
type PostActorIDUpdateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostActorIDUpdateNotFound creates PostActorIDUpdateNotFound with default headers values
func NewPostActorIDUpdateNotFound() *PostActorIDUpdateNotFound {

	return &PostActorIDUpdateNotFound{}
}

// WithPayload adds the payload to the post actor Id update not found response
func (o *PostActorIDUpdateNotFound) WithPayload(payload *models.Error) *PostActorIDUpdateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor Id update not found response
func (o *PostActorIDUpdateNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorIDUpdateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostActorIDUpdateConflictCode is the HTTP code returned for type PostActorIDUpdateConflict
const PostActorIDUpdateConflictCode int = 409

/*PostActorIDUpdateConflict actor already present

swagger:response postActorIdUpdateConflict
*/
type PostActorIDUpdateConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostActorIDUpdateConflict creates PostActorIDUpdateConflict with default headers values
func NewPostActorIDUpdateConflict() *PostActorIDUpdateConflict {

	return &PostActorIDUpdateConflict{}
}

// WithPayload adds the payload to the post actor Id update conflict response
func (o *PostActorIDUpdateConflict) WithPayload(payload *models.Error) *PostActorIDUpdateConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor Id update conflict response
func (o *PostActorIDUpdateConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorIDUpdateConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostActorIDUpdateDefault Unexpected error

swagger:response postActorIdUpdateDefault
*/
type PostActorIDUpdateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostActorIDUpdateDefault creates PostActorIDUpdateDefault with default headers values
func NewPostActorIDUpdateDefault(code int) *PostActorIDUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &PostActorIDUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post actor ID update default response
func (o *PostActorIDUpdateDefault) WithStatusCode(code int) *PostActorIDUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post actor ID update default response
func (o *PostActorIDUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post actor ID update default response
func (o *PostActorIDUpdateDefault) WithPayload(payload *models.Error) *PostActorIDUpdateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post actor ID update default response
func (o *PostActorIDUpdateDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostActorIDUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
