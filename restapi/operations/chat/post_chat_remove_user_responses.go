// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostChatRemoveUserOKCode is the HTTP code returned for type PostChatRemoveUserOK
const PostChatRemoveUserOKCode int = 200

/*PostChatRemoveUserOK user removed

swagger:response postChatRemoveUserOK
*/
type PostChatRemoveUserOK struct {

	/*
	  In: Body
	*/
	Payload *models.AChatRemoveUser `json:"body,omitempty"`
}

// NewPostChatRemoveUserOK creates PostChatRemoveUserOK with default headers values
func NewPostChatRemoveUserOK() *PostChatRemoveUserOK {

	return &PostChatRemoveUserOK{}
}

// WithPayload adds the payload to the post chat remove user o k response
func (o *PostChatRemoveUserOK) WithPayload(payload *models.AChatRemoveUser) *PostChatRemoveUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chat remove user o k response
func (o *PostChatRemoveUserOK) SetPayload(payload *models.AChatRemoveUser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatRemoveUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostChatRemoveUserForbiddenCode is the HTTP code returned for type PostChatRemoveUserForbidden
const PostChatRemoveUserForbiddenCode int = 403

/*PostChatRemoveUserForbidden Forbidden

swagger:response postChatRemoveUserForbidden
*/
type PostChatRemoveUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChatRemoveUserForbidden creates PostChatRemoveUserForbidden with default headers values
func NewPostChatRemoveUserForbidden() *PostChatRemoveUserForbidden {

	return &PostChatRemoveUserForbidden{}
}

// WithPayload adds the payload to the post chat remove user forbidden response
func (o *PostChatRemoveUserForbidden) WithPayload(payload *models.Error) *PostChatRemoveUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chat remove user forbidden response
func (o *PostChatRemoveUserForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatRemoveUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostChatRemoveUserDefault Unexpected error

swagger:response postChatRemoveUserDefault
*/
type PostChatRemoveUserDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChatRemoveUserDefault creates PostChatRemoveUserDefault with default headers values
func NewPostChatRemoveUserDefault(code int) *PostChatRemoveUserDefault {
	if code <= 0 {
		code = 500
	}

	return &PostChatRemoveUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post chat remove user default response
func (o *PostChatRemoveUserDefault) WithStatusCode(code int) *PostChatRemoveUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post chat remove user default response
func (o *PostChatRemoveUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post chat remove user default response
func (o *PostChatRemoveUserDefault) WithPayload(payload *models.Error) *PostChatRemoveUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chat remove user default response
func (o *PostChatRemoveUserDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatRemoveUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
