// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// GetChatIDOKCode is the HTTP code returned for type GetChatIDOK
const GetChatIDOKCode int = 200

/*GetChatIDOK success resonse

swagger:response getChatIdOK
*/
type GetChatIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.AGetChatInfo `json:"body,omitempty"`
}

// NewGetChatIDOK creates GetChatIDOK with default headers values
func NewGetChatIDOK() *GetChatIDOK {

	return &GetChatIDOK{}
}

// WithPayload adds the payload to the get chat Id o k response
func (o *GetChatIDOK) WithPayload(payload *models.AGetChatInfo) *GetChatIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chat Id o k response
func (o *GetChatIDOK) SetPayload(payload *models.AGetChatInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetChatIDForbiddenCode is the HTTP code returned for type GetChatIDForbidden
const GetChatIDForbiddenCode int = 403

/*GetChatIDForbidden Forbidden

swagger:response getChatIdForbidden
*/
type GetChatIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetChatIDForbidden creates GetChatIDForbidden with default headers values
func NewGetChatIDForbidden() *GetChatIDForbidden {

	return &GetChatIDForbidden{}
}

// WithPayload adds the payload to the get chat Id forbidden response
func (o *GetChatIDForbidden) WithPayload(payload *models.Error) *GetChatIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chat Id forbidden response
func (o *GetChatIDForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetChatIDNotFoundCode is the HTTP code returned for type GetChatIDNotFound
const GetChatIDNotFoundCode int = 404

/*GetChatIDNotFound Cant find chat

swagger:response getChatIdNotFound
*/
type GetChatIDNotFound struct {
}

// NewGetChatIDNotFound creates GetChatIDNotFound with default headers values
func NewGetChatIDNotFound() *GetChatIDNotFound {

	return &GetChatIDNotFound{}
}

// WriteResponse to the client
func (o *GetChatIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*GetChatIDDefault Unexpected error

swagger:response getChatIdDefault
*/
type GetChatIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetChatIDDefault creates GetChatIDDefault with default headers values
func NewGetChatIDDefault(code int) *GetChatIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetChatIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get chat ID default response
func (o *GetChatIDDefault) WithStatusCode(code int) *GetChatIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get chat ID default response
func (o *GetChatIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get chat ID default response
func (o *GetChatIDDefault) WithPayload(payload *models.Error) *GetChatIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chat ID default response
func (o *GetChatIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
