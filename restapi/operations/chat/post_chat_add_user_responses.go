// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.softndit.com/collector/backend/models"
)

// PostChatAddUserOKCode is the HTTP code returned for type PostChatAddUserOK
const PostChatAddUserOKCode int = 200

/*PostChatAddUserOK user added

swagger:response postChatAddUserOK
*/
type PostChatAddUserOK struct {

	/*
	  In: Body
	*/
	Payload *models.AChatAddUser `json:"body,omitempty"`
}

// NewPostChatAddUserOK creates PostChatAddUserOK with default headers values
func NewPostChatAddUserOK() *PostChatAddUserOK {

	return &PostChatAddUserOK{}
}

// WithPayload adds the payload to the post chat add user o k response
func (o *PostChatAddUserOK) WithPayload(payload *models.AChatAddUser) *PostChatAddUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chat add user o k response
func (o *PostChatAddUserOK) SetPayload(payload *models.AChatAddUser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatAddUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostChatAddUserForbiddenCode is the HTTP code returned for type PostChatAddUserForbidden
const PostChatAddUserForbiddenCode int = 403

/*PostChatAddUserForbidden Forbidden

swagger:response postChatAddUserForbidden
*/
type PostChatAddUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChatAddUserForbidden creates PostChatAddUserForbidden with default headers values
func NewPostChatAddUserForbidden() *PostChatAddUserForbidden {

	return &PostChatAddUserForbidden{}
}

// WithPayload adds the payload to the post chat add user forbidden response
func (o *PostChatAddUserForbidden) WithPayload(payload *models.Error) *PostChatAddUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chat add user forbidden response
func (o *PostChatAddUserForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatAddUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostChatAddUserDefault Unexpected error

swagger:response postChatAddUserDefault
*/
type PostChatAddUserDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChatAddUserDefault creates PostChatAddUserDefault with default headers values
func NewPostChatAddUserDefault(code int) *PostChatAddUserDefault {
	if code <= 0 {
		code = 500
	}

	return &PostChatAddUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post chat add user default response
func (o *PostChatAddUserDefault) WithStatusCode(code int) *PostChatAddUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post chat add user default response
func (o *PostChatAddUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post chat add user default response
func (o *PostChatAddUserDefault) WithPayload(payload *models.Error) *PostChatAddUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post chat add user default response
func (o *PostChatAddUserDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChatAddUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
